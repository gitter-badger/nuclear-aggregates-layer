@model DoubleGis.Erm.BLFlex.UI.Web.Mvc.Global.Models.Emirates.EmiratesFirmAddressViewModel

@{
    Layout = "../../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script type="text/javascript">

        // saving of for additionalFirmAddressServices control
        window.InitPage = function ()
        {
            this.on('beforepost', function ()
            {
                this.genericSave(this.submitMode);
                return false;
            });

            Ext.apply(this,
                {
                    genericSave: function (submitMode)
                    {
                        var card = this;
                        var onSuccess = function ()
                        {
                            card.refresh();
                        };

                        var onFailure = function ()
                        {
                            // TODO {all, 18.12.2013}: alert можно заменить на ext'овый messagebox
                            alert(Ext.LocalizedResources.SaveError);
                            card.Items.Toolbar.enable();
                        };

                        var additionalFirmAddressServicesIFrame = Ext.getDom('AdditionalFirmAddressServices_frame');
                        if (additionalFirmAddressServicesIFrame)
                        {
                            var contentWindow = additionalFirmAddressServicesIFrame.contentWindow;
                            contentWindow.Ext.DoubleGis.UI.AdditionalFirmServicesControlInstance.Save(onSuccess, onFailure);
                        }
                        else
                            onSuccess();
                    }
                });
        }
    </script>
}

@section CardBody
{
    @Html.HiddenFor(m => m.Id)
    <div class="Tab" id="Div1" title="@BLResources.GeneralTabTitle">
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Firm, FieldFlex.lone, new LookupSettings { EntityName = EntityType.Instance.Firm(), ReadOnly = true })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Address, FieldFlex.lone, new Dictionary<string, object> { { "readonly", "readonly" } })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.PoBox, FieldFlex.lone, new Dictionary<string, object> { { "readonly", "readonly" } })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.PaymentMethods, FieldFlex.lone, new Dictionary<string, object> { { "readonly", "readonly" } })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.WorkingTime, FieldFlex.lone, new Dictionary<string, object> { { "readonly", "readonly" } })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.ClosedForAscertainment, FieldFlex.twins, new Dictionary<string, object> { { "disabled", "disabled" } })
        </div>
    </div>
}