@model PricePositionViewModel

@{
    Layout = "../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script type="text/javascript">
        window.InitPage = function ()
        {
            this.on("beforebuild", function (card)
            {
                card.CopyPricePosition = function ()
                {
                    var entityId = Ext.getDom("Id").value;
                    var params = "dialogWidth:" + 500 + "px; dialogHeight:" + 200 + "px; status:yes; scroll:no;resizable:no;";
                    var url = '/PricePosition/Copy/' + entityId;

                    this.Items.Toolbar.disable();
                    window.showModalDialog(url, null, params);
                    this.Items.Toolbar.enable();
                };
            });

            var setupAmountVisibility = function (amountSpecificationMode)
            {
                Ext.get("Amount").dom.parentNode.style.display = amountSpecificationMode == 'FixedValue' ? 'block' : 'none';
            };

            window.Card.on("afterbuild", function (card)
            {
                Ext.get("AmountSpecificationMode").on("change", function (args, sender)
                {
                    setupAmountVisibility(sender.value);
                });

                setupAmountVisibility(Ext.getDom("AmountSpecificationMode").value);
            });

        };
    </script>
}

@section CardBody
{
    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">
        @if (Model != null)
        {
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.IsPositionControlledByAmount)
            @Html.HiddenFor(m => m.IsRateTypeAvailable)
        }
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Price, FieldFlex.twins, new LookupSettings {EntityName = EntityType.Instance.Price() })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Position, FieldFlex.twins, new LookupSettings {EntityName = EntityType.Instance.Position(), ExtendedInfo = "isSupportedByExport=true"})
            <div class="display-wrapper field-wrapper twins" id="Amount-wrapper">
                <div class="label-wrapper" id="Amount-caption">
                    @Html.LabelFor(m => m.AmountSpecificationMode)<span class="req">*</span>:
                </div>
                <div class="input-wrapper" style="width: 50px; float: right; margin-right: 5px; margin-top: 2px">
                    @Html.TextBoxFor(m => m.Amount, new Dictionary<string, object> {{"class", "inputfields"}, {"style", "width:50px"}})
                </div>
                <div class="input-wrapper" style="margin-top: 3px">
                    @Html.DropDownListFor(m => m.AmountSpecificationMode, EnumResources.ResourceManager, new Dictionary<string, object> {{"class", "inputfields"}})
                </div>
                <div style="clear: both">
                </div>
                <div style="float: right; margin-right: 9px">
                    @Html.ValidationMessageFor(m => m.Amount)
                </div>
                <div style="display: none">
                    @Html.LabelFor(m => m.Amount)
                </div>
            </div>
        </div>

        <div class="row-wrapper">
            @Html.TemplateField(m => m.Cost, FieldFlex.twins)
            @Html.TemplateField(m => m.Currency, FieldFlex.twins, new LookupSettings {EntityName = EntityType.Instance.Currency(), ReadOnly = true})
        </div>
        
        <div class="row-wrapper">
            @Html.TemplateField(m => m.MinAdvertisementAmount, FieldFlex.twins) 
            @Html.TemplateField(m => m.MaxAdvertisementAmount, FieldFlex.twins) 
        </div>
        
        <div class="row-wrapper">
            @Html.TemplateField(m => m.RateType, FieldFlex.lone, null, EnumResources.ResourceManager)
        </div>
    </div>
}