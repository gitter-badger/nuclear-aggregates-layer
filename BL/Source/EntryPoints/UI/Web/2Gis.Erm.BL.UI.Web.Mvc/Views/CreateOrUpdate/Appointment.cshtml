@model DoubleGis.Erm.BL.UI.Web.Mvc.Models.Activity.AppointmentViewModel

@{
    Layout = "../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script src="/Scripts/Ext.ux.TimeComboBox.js?@ThisAssembly.Build" type="text/javascript"></script>
    <script src="/Scripts/Activity/Ext.DoubleGis.UI.RegardingObjectController.js?@ThisAssembly.Build" type="text/javascript"></script>
    <script src="/Scripts/Activity/Ext.DoubleGis.UI.ContactRelationController.js?@ThisAssembly.Build" type="text/javascript"></script>
    <script src="/Scripts/Activity/Ext.DoubleGis.UI.ActivityBase.js?@ThisAssembly.Build" type="text/javascript"></script>
    <script src="/Scripts/Activity/Ext.DoubleGis.UI.Appointment.js?@ThisAssembly.Build" type="text/javascript"></script>
}

@section CustomInit
{
    <script type="text/javascript">
        Ext.onReady(function() {
            var cardSettings = @Html.WriteJson(Model.ViewConfig.CardSettings);
            Ext.apply(cardSettings, { contactField: "AttendeeId", contactComponent: "Attendee" });
            window.Card = new window.Ext.DoubleGis.UI.Appointment(cardSettings);
            window.Card.Build();
        });
    </script>
}

@section CardBody
{
    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.Status)
        @Html.HiddenFor(m => m.Priority)
        
        @{
            var isOwnerAndNameSortFields = new[] { new LookupSortInfo { Direction = "DESC", Field = "IsOwner" }, new LookupSortInfo { Direction = "ASC", Field = "Name" } };
            var isOwnerAndFullNameSortFields = new[] { new LookupSortInfo { Direction = "DESC", Field = "IsOwner" }, new LookupSortInfo { Direction = "ASC", Field = "FullName" } };
        }
        
        @Html.SectionHead("regardingObjectHeader", BLResources.TitleRegarding)
        @Html.SectionRow(
            @Html.TemplateField(m => m.Client, FieldFlex.twins, new LookupSettings { EntityName = EntityName.Client, DefaultSortFields = isOwnerAndNameSortFields }),
            @Html.TemplateField(m => m.Firm, FieldFlex.twins, new LookupSettings { EntityName = EntityName.Firm, ExtendedInfo = "filterToParent=true;needHelp=false", ParentEntityName = EntityName.Client, ParentIdPattern = "ClientId", DefaultSortFields = isOwnerAndNameSortFields }))
        @Html.SectionRow(@Html.TemplateField(m => m.Deal, FieldFlex.twins, new LookupSettings { EntityName = EntityName.Deal, ExtendedInfo = "filterToParent=true", ParentEntityName = EntityName.Client, ParentIdPattern = "ClientId", DefaultSortFields = isOwnerAndNameSortFields }))

        @Html.SectionHead("planHeader", BLResources.TitlePlan)
        @Html.SectionRow(@Html.TemplateField(m => m.Purpose, FieldFlex.lone, null, EnumResources.ResourceManager))
        @Html.SectionRow(@Html.TemplateField(m => m.Title, FieldFlex.lone))

        @Html.SectionRow(
            @Html.TemplateField(m => m.ScheduledStart, FieldFlex.twins, 
                new CalendarSettings { Store = CalendarSettings.StoreMode.Absolute, Time = new CalendarSettings.TimeSettings() }),
            @Html.TemplateField(m => m.ScheduledEnd, FieldFlex.twins, 
                new CalendarSettings { Store = CalendarSettings.StoreMode.Absolute, Time = new CalendarSettings.TimeSettings() })
            )
        @Html.SectionRow(@Html.TemplateField(m => m.Attendee, FieldFlex.lone, new LookupSettings { EntityName = EntityName.Contact, ExtendedInfo = "filterToParent=true", ParentEntityName = EntityName.Client, ParentIdPattern = "ClientId", DefaultSortFields = isOwnerAndFullNameSortFields }))
        @Html.SectionRow(@Html.TemplateField(m => m.Location, FieldFlex.lone))

        @Html.SectionHead("resultHeader", BLResources.TitleResult)
        @Html.SectionRow(@Html.TemplateField(m => m.Description, FieldFlex.lone, new Dictionary<string, object> { { "rows", "10" } }))
   </div>
}