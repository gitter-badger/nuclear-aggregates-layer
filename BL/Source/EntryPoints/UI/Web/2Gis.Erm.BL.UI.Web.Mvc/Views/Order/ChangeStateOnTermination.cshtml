@model ChangeOrderStateOnTerminationViewModel

@{
    Layout = "../Shared/_DialogLayout.cshtml";
}

@section Title { }
@section TopBarTitle { }
@section TopBarMessage { }

@section PageContent
{
    <script type="text/javascript">
        Ext.onReady(function ()
        {

            var processResult = function ()
            {
                return {
                    TerminationReason: Ext.getDom("TerminationReason").value,
                    TerminationReasonComment: Ext.getDom("TerminationReasonComment").value
                };
            };

            //Show error messages
            if (Ext.getDom("Notifications").innerHTML.trim() == "OK")
            {
                window.returnValue = processResult();
                window.close();
                return;
            }
            else if (Ext.getDom("Notifications").innerHTML.trim() != "")
            {
                Ext.getDom("Notifications").style.display = "block";
            }

            var depList = window.Ext.getDom("ViewConfig_DependencyList");
            if (depList.value)
            {
                this.DependencyHandler = new window.Ext.DoubleGis.DependencyHandler();
                this.DependencyHandler.register(window.Ext.decode(depList.value), window.EntityForm);
            }
            depList.value = null;

            Ext.get("Cancel").on("click", function () { window.close(); });
            Ext.get("OK").on("click", function ()
            {
                if (Ext.DoubleGis.FormValidator.validate(window.EntityForm))
                {
                    Ext.getDom("OK").disabled = "disabled";
                    Ext.getDom("Cancel").disabled = "disabled";
                    window.EntityForm.submit();
                }
            });
        });
    </script>
    @using (Html.BeginForm("ChangeStateOnTermination", null, null, FormMethod.Post, new Dictionary<string, object> { { "id", "EntityForm" } }))
    {
    <div class="Tab">
        @Html.HiddenFor(m => m.OrderId)
        @Html.Hidden("ViewConfig_DependencyList", Model.ViewConfig.DependencyList)
        <div style="display: none; height: 15px;" id="Notifications" class="Notifications">
            @Model.Message
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.TerminationReason, FieldFlex.lone, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.TerminationReasonComment, FieldFlex.lone, new Dictionary<string, object> {{ "rows", "5" }})
        </div>
    </div>
    }
}