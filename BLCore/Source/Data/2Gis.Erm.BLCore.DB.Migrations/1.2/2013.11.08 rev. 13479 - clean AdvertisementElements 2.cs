using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

using DoubleGis.Erm.Platform.Migration.Base;
using DoubleGis.Erm.Platform.Migration.Core;

namespace DoubleGis.Erm.DB.Migration.Impl
{
    /// <summary>
    /// В этой миграции приходится использовать SqlCommand, так как нельзя просто использовать string.Format для составления запросов:
    /// в текстовых рекламных материалах бывает что угодно и нужно экранировать потенциально опасные последовательности.
    /// </summary>
    [Migration(13479, "Удаление из AdvertisementElements спецсимволов (может выполняться долго)")]
    public sealed class Migration13479 : TransactedMigration
    {
        private const string SelectQuery = "select distinct Id, Text " +
                                           "from Billing.AdvertisementElements with(nolock) " +
                                           "where {0}";

        private const string UpdateAdvertisementElementCommandText = "update Billing.AdvertisementElements set Text = @text, ModifiedOn = @date, ModifiedBy = @admin where Id = @id";

        private const string InsertPerformedBusinessOperationCommandText = "insert into [Shared].[PerformedBusinessOperations]" +
                                                                           "([Id], [Operation], [Descriptor], [Context], [Date], [Parent]) " +
                                                                           "values (@id, 31, 237181970, @context, @date, null)";

        private const string OperationContextTemplate = "<context><entity change=\"3\" type=\"187\" id=\"{0}\" /></context>";

        private const string ContainsChar = "charindex(nchar({0}), AdvertisementElements.Text) <> 0";

        private const long CrmAdministratorUserId = 1;

        private static readonly long[] Ids = new[]
            {
                225647101768368129, 225647101768368385, 225647101768368641, 225647101768368897, 225647101768369153, 225647101768369409, 225647101768369665, 225647101768369921, 225647101768370177, 225647101768370433, 225647101768370689, 225647101768370945, 225647101768371201, 225647101768371457, 225647101768371713, 225647101768371969, 225647101768372225, 225647101768372481, 225647101768372737, 225647101768372993, 225647101768373249, 225647101768373505, 225647101768373761, 225647101768374017, 225647101768374273, 225647101768374529, 225647101768374785, 225647101768375041, 225647101768375297, 225647101768375553, 225647101768375809, 225647101768376065, 225647101768376321, 225647101768376577, 225647101768376833, 225647101768377089, 225647101768377345, 225647101768377601, 225647101768377857, 225647101768378113, 225647101768378369, 225647101768378625, 225647101768378881, 225647101768379137, 225647101768379393, 225647101768379649, 225647101768379905, 225647101768380161, 225647101768380417, 225647101768380673, 225647101768380929, 225647101768381185, 225647101768381441, 225647101768381697, 225647101768381953, 225647101768382209, 225647101768382465, 225647101768382721, 225647101768382977, 225647101768383233, 225647101768383489, 225647101768383745, 225647101768384001, 225647101768384257, 225647101768384513, 225647101768384769, 225647101768385025, 225647101768385281, 225647101768385537, 225647101768385793, 225647101768386049, 225647101768386305, 225647101768386561, 225647101768386817, 225647101768387073, 225647101768387329, 225647101768387585, 225647101768387841, 225647101768388097, 
                225647101768388353, 225647101768388609, 225647101768388865, 225647101768389121, 225647101768389377, 225647101768389633, 225647101768389889, 225647101768390145, 225647101768390401, 225647101768390657, 225647101768390913, 225647101768391169, 225647101768391425, 225647101768391681, 225647101768391937, 225647101768392193, 225647101768392449, 225647101768392705, 225647101768392961, 225647101768393217, 225647101768393473, 225647101768393729, 225647101768393985, 225647101768394241, 225647101768394497, 225647101768394753, 225647101768395009, 225647101768395265, 225647101768395521, 225647101768395777, 225647101768396033, 225647101768396289, 225647101768396545, 225647101768396801, 225647101768397057, 225647101768397313, 225647101768397569, 225647101768397825, 225647101768398081, 225647101768398337, 225647101768398593, 225647101768398849, 225647101768399105, 225647101768399361, 225647101768399617, 225647101768399873, 225647101768400129, 225647101768400385, 225647101768400641, 225647101768400897, 225647101768401153, 225647101768401409, 225647101768401665, 225647101768401921, 225647101768402177, 225647101768402433, 225647101768402689, 225647101768402945, 225647101768403201, 225647101768403457, 225647101768403713, 225647101768403969, 225647101768404225, 225647101768404481, 225647101768404737, 225647101768404993, 225647101768405249, 225647101768405505, 225647101768405761, 225647101768406017, 225647101768406273, 225647101768406529, 225647101768406785, 225647101768407041, 225647101768407297, 225647101768407553, 225647101768407809, 225647101768408065, 225647101768408321, 
                225647101768408577, 225647101768408833, 225647101768409089, 225647101768409345, 225647101768409601, 225647101768409857, 225647101768410113, 225647101768410369, 225647101768410625, 225647101768410881, 225647101768411137, 225647101768411393, 225647101768411649, 225647101768411905, 225647101768412161, 225647101768412417, 225647101768412673, 225647101768412929, 225647101768413185, 225647101768413441, 225647101768413697, 225647101768413953, 225647101768414209, 225647101768414465, 225647101768414721, 225647101768414977, 225647101768415233, 225647101768415489, 225647101768415745, 225647101768416001, 225647101768416257, 225647101768416513, 225647101768416769, 225647101768417025, 225647101768417281, 225647101768417537, 225647101768417793, 225647101768418049, 225647101768418305, 225647101768418561, 225647101768418817, 225647101768419073, 225647101768419329, 225647101768419585, 225647101768419841, 225647101768420097, 225647101768420353, 225647101768420609, 225647101768420865, 225647101768421121, 225647101768421377, 225647101768421633, 225647101768421889, 225647101768422145, 225647101768422401, 225647101768422657, 225647101768422913, 225647101768423169, 225647101768423425, 225647101768423681, 225647101768423937, 225647101768424193, 225647101768424449, 225647101768424705, 225647101768424961, 225647101768425217, 225647101768425473, 225647101768425729, 225647101768425985, 225647101768426241, 225647101768426497, 225647101768426753, 225647101768427009, 225647101768427265, 225647101768427521, 225647101768427777, 225647101768428033, 225647101768428289, 225647101768428545, 
                225647101768428801, 225647101768429057, 225647101768429313, 225647101768429569, 225647101768429825, 225647101768430081, 225647101768430337, 225647101768430593, 225647101768430849, 225647101768431105, 225647101768431361, 225647101768431617, 225647101768431873, 225647101768432129, 225647101768432385, 225647101768432641, 225647101768432897, 225647101768433153, 225647101768433409, 225647101768433665, 225647101768433921, 225647101768434177, 225647101768434433, 225647101768434689, 225647101768434945, 225647101768435201, 225647101768435457, 225647101768435713, 225647101768435969, 225647101768436225, 225647101768436481, 225647101768436737, 225647101768436993, 225647101768437249, 225647101768437505, 225647101768437761, 225647101768438017, 225647101768438273, 225647101768438529, 225647101768438785, 225647101768439041, 225647101768439297, 225647101768439553, 225647101768439809, 225647101768440065, 225647101768440321, 225647101768440577, 225647101768440833, 225647101768441089, 225647101768441345, 225647101768441601, 225647101768441857, 225647101768442113, 225647101768442369, 225647101768442625, 225647101768442881, 225647101768443137, 225647101768443393, 225647101768443649, 225647101768443905, 225647101768444161, 225647101768444417, 225647101768444673, 225647101768444929, 225647101768445185, 225647101768445441, 225647101768445697, 225647101768445953, 225647101768446209, 225647101768446465, 225647101768446721, 225647101768446977, 225647101768447233, 225647101768447489, 225647101768447745, 225647101768448001, 225647101768448257, 225647101768448513, 225647101768448769, 
                225647101768449025, 225647101768449281, 225647101768449537, 225647101768449793, 225647101768450049, 225647101768450305, 225647101768450561, 225647101768450817, 225647101768451073, 225647101768451329, 225647101768451585, 225647101768451841, 225647101768452097, 225647101768452353, 225647101768452609, 225647101768452865, 225647101768453121, 225647101768453377, 225647101768453633, 225647101768453889, 225647101768454145, 225647101768454401, 225647101768454657, 225647101768454913, 225647101768455169, 225647101768455425, 225647101768455681, 225647101768455937, 225647101768456193, 225647101768456449, 225647101768456705, 225647101768456961, 225647101768457217, 225647101768457473, 225647101768457729, 225647101768457985, 225647101768458241, 225647101768458497, 225647101768458753, 225647101768459009, 225647101768459265, 225647101768459521, 225647101768459777, 225647101768460033, 225647101768460289, 225647101768460545, 225647101768460801, 225647101768461057, 225647101768461313, 225647101768461569, 225647101768461825, 225647101768462081, 225647101768462337, 225647101768462593, 225647101768462849, 225647101768463105, 225647101768463361, 225647101768463617, 225647101768463873, 225647101768464129, 225647101768464385, 225647101768464641, 225647101768464897, 225647101768465153, 225647101768465409, 225647101768465665, 225647101768465921, 225647101768466177, 225647101768466433, 225647101768466689, 225647101768466945, 225647101768467201, 225647101768467457, 225647101768467713, 225647101768467969, 225647101768468225, 225647101768468481, 225647101768468737, 225647101768468993, 
                225647101768469249, 225647101768469505, 225647101768469761, 225647101768470017, 225647101768470273, 225647101768470529, 225647101768470785, 225647101768471041, 225647101768471297, 225647101768471553, 225647101768471809, 225647101768472065, 225647101768472321, 225647101768472577, 225647101768472833, 225647101768473089, 225647101768473345, 225647101768473601, 225647101768473857, 225647101768474113, 225647101768474369, 225647101768474625, 225647101768474881, 225647101768475137, 225647101768475393, 225647101768475649, 225647101768475905, 225647101768476161, 225647101768476417, 225647101768476673, 225647101768476929, 225647101768477185, 225647101768477441, 225647101768477697, 225647101768477953, 225647101768478209, 225647101768478465, 225647101768478721, 225647101768478977, 225647101768479233, 225647101768479489, 225647101768479745, 225647101768480001, 225647101768480257, 225647101768480513, 225647101768480769, 225647101768481025, 225647101768481281, 225647101768481537, 225647101768481793, 225647101768482049, 225647101768482305, 225647101768482561, 225647101768482817, 225647101768483073, 225647101768483329, 225647101768483585, 225647101768483841, 225647101768484097, 225647101768484353, 225647101768484609, 225647101768484865, 225647101768485121, 225647101768485377, 225647101768485633, 225647101768485889, 225647101768486145, 225647101768486401, 225647101768486657, 225647101768486913, 225647101768487169, 225647101768487425, 225647101768487681, 225647101768487937, 225647101768488193, 225647101768488449, 225647101768488705, 225647101768488961, 225647101768489217, 
                225647101768489473, 225647101768489729, 225647101768489985, 225647101768490241, 225647101768490497, 225647101768490753, 225647101768491009, 225647101768491265, 225647101768491521, 225647101768491777, 225647101768492033, 225647101768492289, 225647101768492545, 225647101768492801, 225647101768493057, 225647101768493313, 225647101768493569, 225647101768493825, 225647101768494081, 225647101768494337, 225647101768494593, 225647101768494849, 225647101768495105, 225647101768495361, 225647101768495617, 225647101768495873, 
            };

        private int _idPointer;

        protected override void ApplyOverride(IMigrationContext context)
        {
            var controlCharacters = Enumerable.Range(0, 255)
                                              .Except(new[] { 9, 10 })
                                              .Select(i => (char)i)
                                              .Where(char.IsControl)
                                              .ToArray();

            var expressions = controlCharacters.Select(i => string.Format(ContainsChar, (int)i));

            var selectExpression = string.Format(SelectQuery, string.Join(" or ", expressions));

            var results = new Dictionary<long, string>();

            // Выгребаем из базы РМ с некорретными символами, именно этот запрос требует много ресурсов.
            // Затем для каждого такого РМ подготовим исправленный текст.
            using (var reader = context.Connection.ExecuteReader(selectExpression))
            {
                while (reader.Read())
                {
                    var sourceText = reader.GetString(1);
                    var positionsToRemove = sourceText.Select((c, position) => controlCharacters.Contains(c) ? position : -1).Distinct().OrderBy(i => i).ToArray();
                    var sb = new StringBuilder(sourceText.Length);
                    for (var i = 0; i < positionsToRemove.Length - 1; i++)
                    {
                        var position = positionsToRemove[i] + 1;
                        var count = positionsToRemove[i + 1] - position;
                        sb.Append(sourceText.Substring(position, count));
                    }

                    sb.Append(sourceText.Substring(positionsToRemove.Last() + 1, sourceText.Length - (positionsToRemove.Last() + 1)));

                    results.Add(reader.GetInt64(0), sb.ToString());
                }
            }

            // Создаём своё подключение (System.Data.SqlClient) и собственную транзакцию, потому что на новое подключение уже существующая транзакция не распространяется.
            var migrationExecutionUtcDate = DateTime.UtcNow;
            using (var connection = new SqlConnection(context.Connection.ConnectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction(IsolationLevel.Snapshot))
                {
                    var updateAdvertisementElement = new SqlCommand(UpdateAdvertisementElementCommandText, connection, transaction);
                    updateAdvertisementElement.Parameters.Add(new SqlParameter("id", SqlDbType.BigInt));
                    updateAdvertisementElement.Parameters.Add(new SqlParameter("text", SqlDbType.NVarChar));
                    updateAdvertisementElement.Parameters.Add(new SqlParameter("date", SqlDbType.DateTime2));
                    updateAdvertisementElement.Parameters.Add(new SqlParameter("admin", SqlDbType.BigInt));

                    var insertPerformedBusinessOperation = new SqlCommand(InsertPerformedBusinessOperationCommandText, connection, transaction);
                    insertPerformedBusinessOperation.Parameters.Add(new SqlParameter("id", SqlDbType.BigInt));
                    insertPerformedBusinessOperation.Parameters.Add(new SqlParameter("context", SqlDbType.NVarChar));
                    insertPerformedBusinessOperation.Parameters.Add(new SqlParameter("date", SqlDbType.DateTime2));

                    foreach (var result in results)
                    {
                        try
                        {
                            updateAdvertisementElement.Parameters["id"].Value = result.Key;
                            updateAdvertisementElement.Parameters["text"].Value = result.Value;
                            updateAdvertisementElement.Parameters["date"].Value = migrationExecutionUtcDate;
                            updateAdvertisementElement.Parameters["admin"].Value = CrmAdministratorUserId;
                            updateAdvertisementElement.ExecuteNonQuery();

                            insertPerformedBusinessOperation.Parameters["id"].Value = GetNextId();
                            insertPerformedBusinessOperation.Parameters["context"].Value = string.Format(OperationContextTemplate, result.Key);
                            insertPerformedBusinessOperation.Parameters["date"].Value = migrationExecutionUtcDate;
                            insertPerformedBusinessOperation.ExecuteNonQuery();
                        }
                        catch (IndexOutOfRangeException e)
                        {
                            var message = string.Format("Похоже, не хватило идентификаторов. Всего записей: {0}, всего идентификаторов: {1}", results.Count, Ids.Length);
                            throw new Exception(message, e);
                        }
                    }

                    transaction.Commit();
                }
            }
        }

        private long GetNextId()
        {
            return Ids[_idPointer++];
        }
    }
}