@model GroupOperationViewModel

@{
    Layout = "../Shared/_DialogLayout.cshtml";
}

@section Title { @BLResources.DeleteConfirmation }
@section TopBarTitle { @BLResources.DeleteConfirmation }
@section TopBarMessage { @string.Format(BLResources.GroupOperationTopBarMessage, Model.EntityTypeName.ToStringLocalized(EnumResources.ResourceManager, EnumResources.Culture)) }

@section PageContent
{
    <link rel="stylesheet" type="text/css" href="/Content/Progress.css?@ThisAssembly.Build" />

    <script src="/Scripts/Ext.Ajax.syncRequest.js?@ThisAssembly.Build" type="text/javascript"></script>
    <script src="/Scripts/DoubleGis.UI.GroupOperations.js?@ThisAssembly.Build" type="text/javascript"></script>
    <script src="/Scripts/Tooltip.js?@ThisAssembly.Build" type="text/javascript"></script>
    
    <script type="text/javascript">
        Ext.namespace('Ext.DoubleGis.UI.Delete');
        Ext.DoubleGis.UI.Delete.DeleteProcessor = Ext.extend(Ext.DoubleGis.UI.GroupProcessor, {
			EntitiesToProcess: {},
			constructor: function(config) {
                Ext.DoubleGis.UI.Delete.DeleteProcessor.superclass.constructor.call(this, config);
				if (config.EntitiesToProcess) {
					var entitiesToProcess = {};
					Ext.each(config.EntitiesToProcess, function (x) {
						entitiesToProcess[x.entityId] = x.entityName;
					});
					this.EntitiesToProcess = entitiesToProcess;
				}
            },
			IsUserSettingsValid: function() {
                return true;
            },
			ResolveEntityName: function(entityId) {
				if (this.EntitiesToProcess.hasOwnProperty(entityId))
					return this.EntitiesToProcess[entityId];
				else 
					return this.superclass().ResolveEntityName.call(this, entityId);
			},
            CreateParamsForControllerCall: function (entityId) {
                return { entityId: entityId };
            }
        });
		Ext.onReady(function() {
            Ext.getDom('PageContentCell').style["vertical-align"] = "top";

			var dialogArguments = !window.dialogArguments ? [] : (window.dialogArguments.Values ? window.dialogArguments.Values : window.dialogArguments);
			var ids = dialogArguments;

			var isExtendedMode = (dialogArguments != null && dialogArguments.length > 0 && dialogArguments[0].hasOwnProperty('entityId'));
			if (isExtendedMode) {
				ids = [];
				Ext.each(dialogArguments, function(x) { ids.push(x.entityId); });
			}

            var config = {
				EntitiesToProcess: isExtendedMode ? dialogArguments : null,
				Entities: ids, // массив id сущностейsss
                OperationName: '@Model.OperationName', // тип операции - Qualify, Assign, ChangeTerritory
                CloseButtonText: Ext.LocalizedResources.Close, // локализованная надпись для кнопки закрыть
                NeedToSelectOneOrMoreItemsMsg: Ext.LocalizedResources.NeedToSelectOneOrMoreItems, // локализованная надпись о том что нужно выбрать один или несколько элементов
                ResultMessageTitle: Ext.LocalizedResources.GroupOperationResultsTitle, // локализованная надпись - заголовок для результатов операции
                ResultMessageTemplate: Ext.LocalizedResources.GroupOperationResultsMessage // локализованная надпись - шаблон строки для результатов операции
            };
            var deleteProcessor = new Ext.DoubleGis.UI.Delete.DeleteProcessor(config);
            if (!deleteProcessor.CheckProcessingPossibility()) {
                return;
            }
            deleteProcessor.Process();
        });
    </script>
    <table cellspacing="5" cellpadding="5" width="100%" height="100px">
        <tr>
            <td colspan="2">
                <div style="height: 30px;" id="Notifications" onmouseover="AddTooltip(@Model.Message);" onmouseout="RemoveTooltip();">
                    @Model.Message
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <span id="bodyMessage">
                    @ConfirmationManager.GetConfirmation(new StrictOperationIdentity(DeleteIdentity.Instance, new EntitySet(Model.EntityTypeName)))
                </span>
            </td>
        </tr>
        <tr>
            <td>
                <div id="pbDiv">
                    <div id="pbInner">
                    </div>
                </div>
            </td>
        </tr>
    </table>
    @Html.Hidden("EntityType", Model.EntityTypeName.Description)
}