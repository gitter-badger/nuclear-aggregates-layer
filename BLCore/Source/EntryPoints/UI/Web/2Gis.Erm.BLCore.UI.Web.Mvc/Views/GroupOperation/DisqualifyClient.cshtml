@model GroupOperationViewModel

@{
    Layout = "../Shared/_DialogLayout.cshtml";
}

@section Title { @BLResources.Disqualify }
@section TopBarTitle { @BLResources.DisqualifyClient }
@section TopBarMessage { @string.Format(BLResources.GroupOperationTopBarMessage, Model.EntityTypeName.ToStringLocalized(EnumResources.ResourceManager, EnumResources.Culture)) }

@section PageContent
{
    <link rel="stylesheet" type="text/css" href="/Content/Progress.css?@ThisAssembly.Build" />
    
    <script src="/Scripts/Ext.Ajax.syncRequest.js?@ThisAssembly.Build" type="text/javascript"></script>
    <script src="/Scripts/DoubleGis.UI.GroupOperations.js?@ThisAssembly.Build" type="text/javascript"></script>

    <script type="text/javascript">
        Ext.namespace('Ext.DoubleGis.UI.Client');
        Ext.DoubleGis.UI.Client.DisqualifyProcessor = Ext.extend(Ext.DoubleGis.UI.GroupProcessor, {
            constructor: function (config)
            {
                Ext.apply(config, {
                    listeners: {
                    }
                });
                Ext.DoubleGis.UI.Client.DisqualifyProcessor.superclass.constructor.call(this, config);
            },
            IsUserSettingsValid: function ()
            {
                return true;
            },
            CreateParamsForControllerCall: function (entityId)
            {
                return { entityId: entityId };
            },
            ValidateEntryProcessingSuccessStatus: function (message)
            {
                var bypassValidationInfo = window.Ext.decode(message);
                if (bypassValidationInfo.CanProceed && bypassValidationInfo.CanProceed == true)
                {
                    var isOperationContinue = confirm(bypassValidationInfo.Message);
                    if (isOperationContinue)
                    {
                        var params = this.CreateParamsForControllerCall(bypassValidationInfo.EntityId);
                        params.bypassValidation = true;
                        var url = this.EvaluateOperationUrl(null);
                        this.ProcessSingleEntity(url, params);

                        return this.SuccessStatus.ReprocessingRequired;
                    }

                    return this.SuccessStatus.Rejected;
                }
                return this.SuccessStatus.Approved;
            }
        });
        Ext.onReady(function ()
        {
            var ids = !window.dialogArguments ? [] : (window.dialogArguments.Values ? window.dialogArguments.Values : window.dialogArguments);

            var config = {
                Entities: ids, // массив id сущностей
                OperationName: '@Model.OperationName', // тип операции - Qualify, Assign, ChangeTerritory
                CloseButtonText: Ext.LocalizedResources.Close, // локализованная надпись для кнопки закрыть
                NeedToSelectOneOrMoreItemsMsg: Ext.LocalizedResources.NeedToSelectOneOrMoreItems, // локализованная надпись о том что нужно выбрать один или несколько элементов
                ResultMessageTitle: Ext.LocalizedResources.GroupOperationResultsTitle, // локализованная надпись - заголовок для результатов операции
                ResultMessageTemplate: Ext.LocalizedResources.GroupOperationResultsMessage // локализованная надпись - шаблон строки для результатов операции
            };
            var disqualifyProcessor = new Ext.DoubleGis.UI.Client.DisqualifyProcessor(config);
            if (!disqualifyProcessor.CheckProcessingPossibility())
            {
                return;
            }

            disqualifyProcessor.Process();
        });
    </script>
    @using (Html.BeginForm(null, null, null, FormMethod.Post, new Dictionary<string, object> { { "id", "EntityForm" } }))
    {
    <table cellspacing="5" cellpadding="5" width="100%" height="100%">
        <colgroup>
            <col width="26" />
            <col />
        </colgroup>
        <tbody>
            <tr>
                <td colspan="2">
                    <div style="height: 24px;" id="Notifications">@Model.Message</div>
                </td>
            </tr>
            <tr height="40px">
            <td colspan="2">
                @BLResources.DisqualifyQuestion
            </td>
            </tr>
            <tr style="display:none;">
                <td colspan="2">
                    @Html.HiddenFor(m => m.EntityTypeName)
                </td>
            </tr>
        </tbody>
        <tbody>
            <tr>
                <td colspan="2" style="padding-left: 10px;">
                    <div id="pbDiv">
                        <div id="pbInner">
                        </div>
                    </div>
               </td>
            </tr>
        </tbody>
    </table>
    }
}