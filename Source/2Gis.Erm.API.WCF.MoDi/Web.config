<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="packagePositionSettings" type="DoubleGis.Erm.BL.MoDi.Configurations.PackagePositionsSettingsConfiguration, 2Gis.Erm.BL.MoDi" requirePermission="false"/>
    <section name="saleSchemasSettings" type="DoubleGis.Erm.BL.MoDi.Configurations.SaleSchemasSettingsConfiguration, 2Gis.Erm.BL.MoDi" requirePermission="false"/>
  </configSections>
  <appSettings>
    <!-- IAppSettings -->
    <add key="ReserveUserAccount" value="reserve"/>
    <add key="EnableNotifications" value="false"/>
    <add key="EnableCaching" value="true"/>
    <add key="EnableReplication" value="false"/>
    <add key="WarmClientDaysCount" value="14"/>
    <add key="SignificantDigitsNumber" value="2"/>
    <add key="MinDebtAmount" value="-100"/>
    <add key="OrderRequestProcessingHoursAmount" value="2"/>
    <add key="BasicLanguage" value="ru"/>
    <add key="ReserveLanguage" value="en"/>
    <add key="BusinessModel" value="Russia"/>
    <add key="TargetEnvironment" value="Development"/>
    <!-- возможные значения: Development, Test, Production -->
    <!-- Money Distribution related -->
    <add key="ProceedsReportTemplate" value="Templates\Отчет по выручке.dotx"/>
    <add key="VatDisabledDocumentTemplate" value="Templates\Региональный бланк заказа без НДС.dotx"/>
    <add key="VatEnabledDocumentTemplate" value="Templates\Региональный бланк заказа с НДС.dotx"/>
    <add key="EntryPointName" value="API.WCF.MoDi"/>
    <add key="TargetEnvironmentName" value="Dev"/>
  </appSettings>
  <packagePositionSettings configSource="packagePositions.config"/>
  <saleSchemasSettings configSource="salesSchemas.config"/>
  <!--
    For a description of web.config changes see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.5.1" />
      </system.Web>
  -->
  <system.web>
    <httpRuntime targetFramework="4.5"/>
    <compilation debug="true" targetFramework="4.5.1"/>
    <customErrors mode="Off"/>
  </system.web>
  <system.serviceModel>
    <serviceHostingEnvironment multipleSiteBindingsEnabled="true" minFreeMemoryPercentageToActivateService="0"/>
    <extensions>
      <behaviorExtensions>
        <add name="serviceVersioning" type="DoubleGis.Erm.Platform.WCF.Extensions.VersionBehaviorExtensionElement, 2Gis.Erm.Platform.WCF.Extensions"/>
      </behaviorExtensions>
    </extensions>
    <behaviors>
      <serviceBehaviors>
        <behavior name="defautServiceBehavior">
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          <serviceDiscovery/>
          <serviceVersioning/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <bindings>
      <basicHttpBinding>
        <binding name="secureBasicHttpConfiguration">
          <security mode="Transport">
            <transport clientCredentialType="None"/>
          </security>
        </binding>
      </basicHttpBinding>
      <wsHttpBinding>
        <binding name="secureWsHttpConfiguration">
          <security mode="Transport">
            <transport clientCredentialType="None"/>
          </security>
        </binding>
      </wsHttpBinding>
    </bindings>
    <services>
      <service name="DoubleGis.Erm.BL.WCF.MoDi.PrintRegionalApplicationService" behaviorConfiguration="defautServiceBehavior">
        <endpoint name="WsHttpBinding_IPrintRegionalApplicationService" address="" binding="wsHttpBinding" bindingConfiguration="secureWsHttpConfiguration" contract="DoubleGis.Erm.BL.API.MoDi.Remote.PrintRegional.IPrintRegionalApplicationService"/>
        <endpoint kind="discoveryEndpoint" binding="wsHttpBinding" bindingConfiguration="secureWsHttpConfiguration"/>
      </service>
      <service name="DoubleGis.Erm.BL.WCF.MoDi.AccountingSystemApplicationService" behaviorConfiguration="defautServiceBehavior">
        <endpoint name="WsHttpBinding_IAccountingSystemApplicationService" address="" binding="wsHttpBinding" bindingConfiguration="secureWsHttpConfiguration" contract="DoubleGis.Erm.BL.API.MoDi.Remote.AccountingSystem.IAccountingSystemApplicationService"/>
        <endpoint kind="discoveryEndpoint" binding="wsHttpBinding" bindingConfiguration="secureWsHttpConfiguration"/>
      </service>
      <service name="DoubleGis.Erm.BL.WCF.MoDi.WithdrawalInfoApplicationService" behaviorConfiguration="defautServiceBehavior">
        <endpoint name="WsHttpBinding_IWithdrawalInfoApplicationService" address="" binding="wsHttpBinding" bindingConfiguration="secureWsHttpConfiguration" contract="DoubleGis.Erm.BL.API.MoDi.Remote.WithdrawalInfo.IWithdrawalInfoApplicationService"/>
        <endpoint kind="discoveryEndpoint" binding="wsHttpBinding" bindingConfiguration="secureWsHttpConfiguration"/>
      </service>
      <service name="DoubleGis.Erm.BL.WCF.MoDi.ReportsApplicationService" behaviorConfiguration="defautServiceBehavior">
        <endpoint name="BasicHttpBinding_IReportsApplicationService" address="" binding="basicHttpBinding" bindingConfiguration="secureBasicHttpConfiguration" contract="DoubleGis.Erm.BL.API.MoDi.Remote.Reports.IReportsApplicationService"/>
        <endpoint kind="discoveryEndpoint" address="Discovery" binding="wsHttpBinding" bindingConfiguration="secureWsHttpConfiguration"/>
      </service>
    </services>
  </system.serviceModel>
  <system.webServer>
    <directoryBrowse enabled="true"/>
  </system.webServer>
  <!--<system.diagnostics>
    <trace autoflush="true" />
    <sources>
      <source name="System.ServiceModel"
              switchValue="Information, ActivityTracing"
              propagateActivity="true">
        <listeners>
          <add name="traceListener"
              type="System.Diagnostics.XmlWriterTraceListener"
              initializeData= "c:\TracesWCF.svclog" />
        </listeners>
      </source>
    </sources>
  </system.diagnostics>-->
  <!-- Комментарий по управлению timeout транзакций.
  В инфраструктуре транзакций .net - system.transactions (её использует например, transactionscope, entityframework и т.п.) есть два основных понятия
    1). Запрошенный timeout (либо явно при создании транзакции, команды и т.п., либо используется значение по умолчанию)
    2). Max допустимый timeout
  Т.о. результирующих timeout транзакции будет выставлен, в запрошенный, но не выше max допустимого. 
    Default timeout по умолчанию 1 минута. 
    Max timeout по умолчанию 10 минут.
  Управление значениями timeout производится, либо из кода, либо через иерархию config файлов .NET, причем maxTimeout можно указывать, 
  только через config файлы (если не использовать всякие хаки через reflection и TransactionManager).
  В ERM большинство бизнес транзакций (явно создаваемых через transactionscope и т.п.) явно указывает timeout как бесконечный,
  большинство не явных транзакций/команд выполняемых entityframework, имеет timeout по умолчанию, 
  однако, есть механизмы usecaseduration и т.п. - когда для определенных usecase timeout значительно повышается.
  Вот в случае значительного повышения важно помнить, что есть ещё и maxTimeout, который ограничивает возможности приложения.
  Т.о. чтобы стали возможными долгие транзакции (например, usecase сборки, проверки заказов и т.п.) - необходимо не только из кода запросить нужное значение timeout, 
  но и соответствующим образом настроить значение maxtimeout.
  Настроить это значение можно несколькими способами:
    1). в machine.config нужной версии .NET добавить секцию вида:
      <system.transactions>
        <defaultSettings timeout="00:01:00" />
        <machineSettings maxTimeout="02:00:00" />
      </system.transactions>
      Это повлияет на все .NET процессы на компьютере.
      Этот вариант сейчас используется на production (maxtimeout выставлен в 2 часа). Минус очевиден - влияение на все .net процессы, которые не обязательно используют snapshot isolation level,
      а, значит, и возможность deadlock у них может быть выше - т.е. такой вариант более менее корректен, если на компьютере исполняются только точно контроллируемые приложения.
    2). в machine.config нужной версии .NET, найти настройки для секции system.transactions вида:
    <sectionGroup name="system.transactions" type="System.Transactions.Configuration.TransactionsSectionGroup, System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null">
        <section name="defaultSettings" type="System.Transactions.Configuration.DefaultSettingsSection, System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null"/>
        <section name="machineSettings" type="System.Transactions.Configuration.MachineSettingsSection, System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null" allowDefinition="MachineToApplication" allowExeDefinition="MachineToApplication"/>
    </sectionGroup>
    где, нужно изменить значения атрибутов:
        allowDefinition="MachineOnly" (для хостящихся в IIS процесов .NET - ASP.NET и т.п.) -> allowDefinition="MachineToApplication"
        allowExeDefinition="MachineOnly" (для standalone приложение windowsservices, desktop, console и т.п.) -> allowExeDefinition="MachineToApplication"
    а в конфиг файл целевого приложения (App.config, web.config и т.п.) уже добавить секцию:    
    <system.transactions>
      <defaultSettings timeout="00:01:00" />
      <machineSettings maxTimeout="02:00:00" />
    </system.transactions>
    Т.о. настройки maxTimeout изменяться не для всех процессов .NET, а только для тех, для которых это реально нужно.
    Сейчас, используется вариант 1 - т.к. с него все началось, да и вариант 2 все равно требует внесения изменений в machine.config
  -->
</configuration>