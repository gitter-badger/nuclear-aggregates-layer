namespace DoubleGis.Erm.Platform.Model.Simplified
{
    /// <summary>
    /// Маркерный интерфейс - показывает, что функционал помеченный данным маркером,
    /// использует упрощенную модель взаимодействия с persistence  storage:
    /// - имеет право напрямую получать доступ к уровню persistence  ignorance (сущностных репозиториев)  - т.е. не используя агрегирующие репозитории
    /// - данный функционал может работать только с сущностями явно помеченными как разрешенные к использованию в упрощенной модели
    /// Цель упрощенной модели - работа с сущностями ERM (CRUD/CUD), которые:
    /// - не являются сущностями domain model ERM (например, просто используют тот же persistence что и сущности domain model ERM ) - пример, все что касается Notifications
    /// - является справочными/readonly сущностями в domain model ERM. В этом случае для всех application services обычных (в том числе и агрегирующих репозиториев) - эти сущности readonly.
    ///     А уже для выполнения (CRUD/CUD) операций над ними используется упрощенная модель. При этом все инварианты должны поддерживаться полноценными application services, 
    ///     в упрощенной модели возможна только простейшая валидация и тупой CRUD. 
    ///     Например, деактивация OrganizationUnit - используется упрощенная модель, т.к. OrganizationUnit - readonly в domain model ERM.
    ///     При этом инварианты вроде при деактивации OrganizationUnit, нужно декативировать всех пользователей поддерживаются через основную модель - 
    ///     сначала деактивируем всех пользователей через основную модель, а уже потом OrganizationUnit через упрощенную. 
    ///     Т.е. в основной модели есть операция деактивировать пользователей OrganizationUnit, но не деактивации самого OrganizationUnit.
    ///     При этом при деактивации OrganizationUnit можно проверить, что нет активных пользователей, если есть то ничего не делаем.
    /// </summary>
    public interface ISimplifiedModelConsumer
    {
    }
}
