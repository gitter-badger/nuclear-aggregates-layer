<?xml version="1.0" encoding="utf-8"?>

<!-- script for build and deploy DoubleGis ERM project -->
<Project
  ToolsVersion="4.0"
  InitialTargets="SetTeamCityBuildNumber"
  DefaultTargets="HelloTarget"
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- import third-party build tasks -->
  <Import Project="DoubleGis.Erm.Build.targets" />

  <PropertyGroup Label="Common versioning properties">
    <Common_Version_Major>2</Common_Version_Major>
    <Common_Version_Minor>0</Common_Version_Minor>
    <Common_Version_Revision>0</Common_Version_Revision>
    <Common_Version_Build>0</Common_Version_Build>
    
    <!-- ProductVersion can have only 3 numbers - Common_Version_Major.Common_Version_Minor.Revision, 4th number (Common_Version_Build) always ignored by installer engine -->
    <ProductVersion>$(Common_Version_Major).$(Common_Version_Minor).$(Common_Version_Revision)</ProductVersion>
    <FullProductVersion>$(ProductVersion).$(Common_Version_Build)</FullProductVersion>
  </PropertyGroup>

  <PropertyGroup Label="Common configurations">
    <Configuration>Release</Configuration>
    
    <!-- specify build sub-toolset -->
    <VisualStudioVersion>11.0</VisualStudioVersion>

    <!-- имя publish profile -->
    <PublishProfileName>NOT SET</PublishProfileName>
    <PublishProfileFileName>$(PublishProfileName).pubxml</PublishProfileFileName>
  </PropertyGroup>
  
  <PropertyGroup Label="Common web publishing">

    <!-- сервер куда устанавливаются конечные сервисы Erm -->
    <EntryPoint_HostName>Not set</EntryPoint_HostName>

    <!-- Microsoft Web Deploy V3 -->
    <MsDeployServiceUrl>https://$(EntryPoint_HostName):8172/MSDeploy.axd</MsDeployServiceUrl>
    <MsDeployPath>$(ProgramFiles)\IIS\Microsoft Web Deploy V3\msdeploy.exe</MsDeployPath>
    
  </PropertyGroup>

  <PropertyGroup Label="Common web application publishing">
    <!-- файл версии включается в корень zip пакета чтобы сразу было видно что за версия -->
    <VersionFileName>version_$(Common_Version_Major)_$(Common_Version_Minor)_$(Common_Version_Revision)_$(Common_Version_Build)</VersionFileName>
  </PropertyGroup>
  
  <PropertyGroup Label="Erm components location">
    <ErmSolutionDir>$([System.IO.Path]::GetFullPath($(MSBuildThisFileDirectory)..\..\..))</ErmSolutionDir>
    <PlatformSources>$(ErmSolutionDir)\Platform\Source\</PlatformSources>
    <BLSources>$(ErmSolutionDir)\BL\Source\</BLSources>
    <BLFlexSources>$(ErmSolutionDir)\BLFlex\Source\</BLFlexSources>
    <CompositionRootsSources>$(ErmSolutionDir)\CompositionRoots\Source\</CompositionRootsSources>
    <AutoTestsSources>$(ErmSolutionDir)\AutoTests\Source\</AutoTestsSources>
  </PropertyGroup>
  
  <!-- import target for erm wpf client build and deploy -->
  <Import Project="ErmWPFClientDeploy.targets" />

  <PropertyGroup Label="MsCRM properties">
    <MsCRMPluginsProjectName>2Gis.Erm.BL.MsCRM.Plugins</MsCRMPluginsProjectName>
    <MsCRMPluginsProjectLocation>$(CompositionRootsSources)\ApplicationServices\$(MsCRMPluginsProjectName)</MsCRMPluginsProjectLocation>
    
    <Option_DynamicsCrm>True</Option_DynamicsCrm>
    
    <!-- имя пакета с hack файлами -->
    <DynamicsCrmPackageName>$(MSBuildProjectDirectory)\CustomizeDynamicsCrm-$(ProductVersion)-$(Configuration).zip</DynamicsCrmPackageName>

    <!-- имя сервера Dynamics CRM вместе с протоколом (пример: https://uk-erm-test.2gis.local/DoubleGis) -->
    <DynamicsCrm_ServerName>Not set</DynamicsCrm_ServerName>
    <DynamicsCrm_OrganizationName>DoubleGis</DynamicsCrm_OrganizationName>

    <CrmSdkPath>$(BLSources)\Libs\Microsoft Dynamics CRM SDK 4.0.13</CrmSdkPath>
    
    <!-- строка подключения к Dynamics CRM в момент развёртывания (никак не связана со строкой подключения в самом приложении) -->
    <DynamicsCrm_PublishConnectionString>Authentication Type=Integrated%3B Server=http://$(DynamicsCrm_ServerName)/$(DynamicsCrm_OrganizationName)</DynamicsCrm_PublishConnectionString>
  </PropertyGroup>

  <PropertyGroup Label="Migrations composition root properties">
    <BLMigrationsImplsProjectName>2Gis.Erm.BL.DB.Migrations</BLMigrationsImplsProjectName>
    <BLMigrationsImplsProjectLocation>$(BLSources)\Data\$(BLMigrationsImplsProjectName)</BLMigrationsImplsProjectLocation>
    
    <MigratorProjectName>2Gis.Erm.Migrator</MigratorProjectName>
    <MigratorProjectLocation>$(CompositionRootsSources)\$(MigratorProjectName)</MigratorProjectLocation>
    
    <DatabaseMigrationsCommonOutputPath>$([System.IO.Path]::GetFullPath('migrations'))</DatabaseMigrationsCommonOutputPath>
  </PropertyGroup>
  
  <PropertyGroup Label="UI.Web composition root properties">
    <UIWebProjectName>2Gis.Erm.UI.Web.Mvc</UIWebProjectName>
    <UIWebProjectNameLocation>$(CompositionRootsSources)\$(UIWebProjectName)</UIWebProjectNameLocation>
  
    <Option_Websites_WebApp>True</Option_Websites_WebApp>
   </PropertyGroup>
  
  <PropertyGroup Label="TaskService composition root properties">
    <TaskServicePlatform>x64</TaskServicePlatform>
    <TaskServiceProjectName>2Gis.Erm.TaskService</TaskServiceProjectName>
    <TaskServiceProjectLocation>$(CompositionRootsSources)\$(TaskServiceProjectName)</TaskServiceProjectLocation>
    
    <TaskServiceInstallerProjectName>$(TaskServiceProjectName).Installer</TaskServiceInstallerProjectName>
    <TaskServiceInstallerProjectLocation>$(CompositionRootsSources)\$(TaskServiceInstallerProjectName)</TaskServiceInstallerProjectLocation>
    
    <TaskServiceInstallerFileNameWithoutExtension>$(TaskServiceInstallerProjectName)-$(TaskServicePlatform)-$(ProductVersion)-$(Configuration)</TaskServiceInstallerFileNameWithoutExtension>
    <!-- имя файла с инсталлятором для task service -->
    <TaskServiceInstallerFileNameWithExtension>$(TaskServiceInstallerFileNameWithoutExtension).msi</TaskServiceInstallerFileNameWithExtension>
  
    <Option_ErmTaskService>True</Option_ErmTaskService>
   </PropertyGroup>
  
  <PropertyGroup Label="WCF.OrderValidation composition root properties">
    <OrderValidationProjectName>2Gis.Erm.API.WCF.OrderValidation</OrderValidationProjectName>
    <OrderValidationServiceProjectLocation>$(CompositionRootsSources)\$(OrderValidationProjectName)</OrderValidationServiceProjectLocation>
  
    <Option_Websites_OrderValidations>True</Option_Websites_OrderValidations>
   </PropertyGroup>
  
  <PropertyGroup Label="WCF.Operations composition root properties">
    <OperationsProjectName>2Gis.Erm.API.WCF.Operations</OperationsProjectName>
    <BasicOperationsServiceProjectLocation>$(CompositionRootsSources)\$(OperationsProjectName)</BasicOperationsServiceProjectLocation>
  
    <Option_Websites_BasicOperations>True</Option_Websites_BasicOperations>
   </PropertyGroup>
  
  <PropertyGroup Label="WCF.Operations.Special composition root properties">
    <OperationsSpecialProjectName>2Gis.Erm.API.WCF.Operations.Special</OperationsSpecialProjectName>
    <CostCalculationServiceProjectLocation>$(CompositionRootsSources)\$(OperationsSpecialProjectName)</CostCalculationServiceProjectLocation>
  
    <Option_Websites_CostCalculation>True</Option_Websites_CostCalculation>
   </PropertyGroup>
  
   <PropertyGroup Label="WCF.Releasing composition root properties">
    <ReleasingProjectName>2Gis.Erm.API.WCF.Releasing</ReleasingProjectName>
    <ReleasingProjectLocation>$(CompositionRootsSources)\$(ReleasingProjectName)</ReleasingProjectLocation>
  
    <Option_Websites_Releasing>False</Option_Websites_Releasing>
   </PropertyGroup>
  
  <PropertyGroup Label="WCF.MoDi composition root properties">
    <MoDiProjectName>2Gis.Erm.API.WCF.MoDi</MoDiProjectName>
    <MoneyDistributionServiceProjectLocation>$(CompositionRootsSources)\$(MoDiProjectName)</MoneyDistributionServiceProjectLocation>
  
    <Option_Websites_MoneyDistribution>False</Option_Websites_MoneyDistribution>
   </PropertyGroup>
  
  <PropertyGroup Label="WCF.Metadata composition root properties">
    <MetadataProjectName>2Gis.Erm.API.WCF.Metadata</MetadataProjectName>
    <MetadataServiceProjectLocation>$(CompositionRootsSources)\$(MetadataProjectName)</MetadataServiceProjectLocation>
  
    <Option_Websites_MetadataService>True</Option_Websites_MetadataService>
   </PropertyGroup>
  
  <PropertyGroup Label="Reports composition root properties">
    <ReportsProjectName>ErmReports</ReportsProjectName>
    <ReportsProjectLocation>$([System.IO.Path]::GetFullPath('$(ErmSolutionDir)\..\$(ReportsProjectName)'))</ReportsProjectLocation>
  
    <Option_Reports>True</Option_Reports>
   </PropertyGroup>
   
  <PropertyGroup Label="Unit Tests properties">
    <PlatformUnitTestsProjectName>2Gis.Erm.Platform.Tests.Unit</PlatformUnitTestsProjectName>
    <PlatformUnitTestsProjectLocation>$(PlatformSources)\Tests\$(PlatformUnitTestsProjectName)</PlatformUnitTestsProjectLocation>
  
    <BLUnitTestsProjectName>2Gis.Erm.BL.Tests.Unit</BLUnitTestsProjectName>
    <BLUnitTestsProjectLocation>$(BLSources)\Tests\$(BLUnitTestsProjectName)</BLUnitTestsProjectLocation>
      
    <BLFlexUnitTestsProjectName>2Gis.Erm.BLFlex.Tests.Unit</BLFlexUnitTestsProjectName>
    <BLFlexUnitTestsProjectLocation>$(BLFlexSources)\Tests\$(BLFlexUnitTestsProjectName)</BLFlexUnitTestsProjectLocation>
   </PropertyGroup>

  <PropertyGroup Label="Integration InProc Tests properties">
    <IntegrationInProcTestsProjectName>2Gis.Erm.Tests.Integration.InProc</IntegrationInProcTestsProjectName>
    <IntegrationInProTestsProjectLocation>$(CompositionRootsSources)\Tests\$(IntegrationInProcTestsProjectName)</IntegrationInProTestsProjectLocation>
    
    <Option_Tests_Intergration_InProc>True</Option_Tests_Intergration_InProc>
  </PropertyGroup>
  
  <PropertyGroup Label="AutoTests composition root properties">
    <FakeBusServiceProjectName>2gis.Erm.Functional.ServiceStubs</FakeBusServiceProjectName>
    <FakeBusServiceProjectLocation>$(AutoTestsSources)\Functional\WCF\2gis.Erm.Functional.ServiceStubs</FakeBusServiceProjectLocation>
  
    <Option_ErmFakeBusService>True</Option_ErmFakeBusService>
    
    <BLIntegrationTestsProjectName>DoubleGis.Erm.Integration.Test</BLIntegrationTestsProjectName>
    <BLIntegrationTestsProjectLocation>$(AutoTestsSources)\Integration\$(BLIntegrationTestsProjectName)</BLIntegrationTestsProjectLocation>
  
    <BLFunctionalTestsProjectName>DoubleGis.Erm.Functional.Test</BLFunctionalTestsProjectName>
    <BLFunctionalTestsProjectLocation>$(AutoTestsSources)\Functional\$(BLFunctionalTestsProjectName)</BLFunctionalTestsProjectLocation>  
   </PropertyGroup>

  <Target Name="WpfBuild" DependsOnTargets="UpdateAssemblyInfo;DeployWebsites;DeployClickOnceToInstallUrl" />

  <PropertyGroup>
    <WebBuildDependsOn>
      PreWebBuild;
      DeployErmTaskService;
      DeployWebsites;
      DeployDynamicsCrm;
      DeployReports
    </WebBuildDependsOn>
  </PropertyGroup>
  <Target Name="PreWebBuild">
    <Message Importance="high" Text="Targets WebBuildDependsOn: $(WebBuildDependsOn)" />
  </Target>
  <Target Name="WebBuild" DependsOnTargets="UpdateAssemblyInfo;$(WebBuildDependsOn)" />
  <Target Name="WebBuildParallel" DependsOnTargets="UpdateAssemblyInfo">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="$(WebBuildDependsOn)" BuildInParallel="true" />
  </Target>

  <!-- PackagesBuild -->
  <PropertyGroup>
    <PackagesBuildDependsOn>
      PrePackagesBuild;
      BuildErmTaskService;
      BuildWebsites;
      BuildDynamicsCrm;
      AddAdditionalBuildArtifacts
    </PackagesBuildDependsOn>
  </PropertyGroup>
  <Target Name="PrePackagesBuild">
    <Message Importance="high" Text="Targets PackagesBuildDependsOn: $(PackagesBuildDependsOn)" />
  </Target>
  <Target Name="PackagesBuild" DependsOnTargets="UpdateAssemblyInfo;$(PackagesBuildDependsOn)" />
  <Target Name="PackagesBuildParallel" DependsOnTargets="UpdateAssemblyInfo">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="$(PackagesBuildDependsOn)" BuildInParallel="true" />
  </Target>

  <!-- BuildDynamicsCrm -->
  <PropertyGroup>
    <BuildDynamicsCrmDependsOn>
      PreBuildDynamicsCrm;
      BuildDynamicsCrmHackFiles;
      BuildDynamicsCrmPlugins
    </BuildDynamicsCrmDependsOn>
  </PropertyGroup>
  <Target Name="PreBuildDynamicsCrm">
    <Message Importance="high" Text="Targets BuildDynamicsCrmDependsOn: $(BuildDynamicsCrmDependsOn)" />
  </Target>
  <Target
    Name="BuildDynamicsCrm"
    Condition="'$(Option_DynamicsCrm)' == 'True'"
    DependsOnTargets="$(BuildDynamicsCrmDependsOn)"
  />

  <!-- DeployDynamicsCrm -->
  <PropertyGroup>
    <DeployDynamicsCrmDependsOn>
      PreDeployDynamicsCrm;
      DeployDynamicsCrmHackFiles;
      DeployDynamicsCrmPlugins
    </DeployDynamicsCrmDependsOn>
  </PropertyGroup>
  <Target Name="PreDeployDynamicsCrm">
    <Message Importance="high" Text="Targets DeployDynamicsCrmDependsOn: $(DeployDynamicsCrmDependsOn)" />
  </Target>
  <Target
    Name="DeployDynamicsCrm"
    Condition="'$(Option_DynamicsCrm)' == 'True'"
    DependsOnTargets="$(DeployDynamicsCrmDependsOn)" />

  <!-- BuildWebsites -->
  <PropertyGroup>
    <BuildWebsitesDependsOn>
		PreBuildWebsites;
		BuildErmWebApp;
		BuildDatabaseMigrations;
		BuildOrderValidationService;
		BuildFakeBusService;
		BuildBasicOperationsService;
		BuildCostCalculationService;
    BuildReleasingService;
		BuildMoneyDistributionService;
		BuildMetadataService
	</BuildWebsitesDependsOn>
  </PropertyGroup>
  <Target Name="PreBuildWebsites">
    <Message Importance="high" Text="Targets BuildWebsitesDependsOn: $(BuildWebsitesDependsOn)" />
  </Target>
  <Target Name="BuildWebsites" DependsOnTargets="$(BuildWebsitesDependsOn)" />

  <!-- DeployWebsites -->
  <PropertyGroup>
    <DeployWebsitesDependsOn>
		PreDeployWebsites;
		DeployFakeBusService;
		DeployDatabaseMigrations;
		DeployErmWebApp;
		DeployOrderValidationService;
		DeployBasicOperationsService;
		DeployCostCalculationService;
    DeployReleasingService;
		DeployMoneyDistributionService;
		DeployMetadataService;
		OverwriteProductionValues
	</DeployWebsitesDependsOn>
  </PropertyGroup>
  <Target Name="PreDeployWebsites">
    <Message Importance="high" Text="Targets DeployWebsitesDependsOn: $(DeployWebsitesDependsOn)" />
  </Target>
  <Target Name="DeployWebsites" DependsOnTargets="$(DeployWebsitesDependsOn)" />

  <!-- SetTeamCityBuildNumber -->
  <Target Name="SetTeamCityBuildNumber">
    <Message Text="##teamcity[buildNumber '$(FullProductVersion)']" Importance="low" />
  </Target>
  
  <!-- UpdateAssemblyInfo -->
  <Target Name="UpdateAssemblyInfo">
    
    <DoubleGis.Erm.Build.Tasks.UpdateAssemblyInfo
      AssemblyInfo="$(CompositionRootsSources)\AssemblyInfo.Version.cs"
      First="$(Common_Version_Major)"
      Second="$(Common_Version_Minor)"
      Third="$(Common_Version_Revision)"
      Fourth="$(Common_Version_Build)"
      />

    <OnError ExecuteTargets="HandleBuildError" />

  </Target>

  <!-- BuildDynamicsCrmHackFiles -->
  <Target Name="BuildDynamicsCrmHackFiles">
    <PropertyGroup>
      <DynamicsCrmWebsiteDir>C:\inetpub\wwwroot</DynamicsCrmWebsiteDir>
    </PropertyGroup>

    <ItemGroup>
      <HackFiles Include="$(MsCRMPluginsProjectLocation)\Customizations\Hack\**\*.*" />
    </ItemGroup>

    <!-- copy hack files to dynamics crm web site content folder -->
    <Copy
      SourceFiles="@(HackFiles)"
      DestinationFiles="@(HackFiles->'$(DynamicsCrmWebsiteDir)\%(RecursiveDir)%(Filename)%(Extension)')"
      OverwriteReadOnlyFiles="True"
    />

    <!-- create deployment package -->
    <Exec
      Command="&quot;$(MsDeployPath)&quot; -verb:sync -source:manifest='$(MSBuildProjectDirectory)\DynamicsCrmHackFilesManifest.xml' -dest:package='$(DynamicsCrmPackageName)' -disableLink:AppPoolExtension -disableLink:ContentExtension -disableLink:CertificateExtension -retryAttempts=2 -disablerule:BackupRule"
    />
    <!-- add TeamCity artifact -->
    <Message Text="##teamcity[publishArtifacts '$(DynamicsCrmPackageName) => Dynamics CRM']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
    
  </Target>

  <!-- DeployDynamicsCrmHackFiles -->
  <Target Name="DeployDynamicsCrmHackFiles" DependsOnTargets="BuildDynamicsCrmHackFiles">

    <!-- deploy package -->
    <Exec
      Command="&quot;$(MsDeployPath)&quot; -verbose -verb:sync -source:package='$(DynamicsCrmPackageName)' -dest:auto,ComputerName='https://$(DynamicsCrm_ServerName):8172/msdeploy.axd',AuthType='NTLM' -allowUntrusted -retryAttempts=2 -disablerule:BackupRule"
    />

    <OnError ExecuteTargets="HandleBuildError" />    
  </Target>

  <!-- BuildDynamicsCrmPlugins -->
  <Target Name="BuildDynamicsCrmPlugins">

    <!-- build plugins -->
    <MSBuild
      Projects="$(MsCRMPluginsProjectLocation)\$(MsCRMPluginsProjectName).csproj"
      Properties="Configuration=$(Configuration);Platform=AnyCPU;VisualStudioVersion=$(VisualStudioVersion)"
    />

    <!-- add TeamCity artifact -->
    <Message Text="##teamcity[publishArtifacts '$(MsCRMPluginsProjectLocation)\bin\$(Configuration)\$(MsCRMPluginsProjectName).dll' => Dynamics CRM\PluginRegistration']" Importance="low" />

    <!-- add TeamCity artifact -->
    <Message Text="##teamcity[publishArtifacts '$(MsCRMPluginsProjectLocation)\PluginRegistration.xml' => Dynamics CRM\PluginRegistration']" Importance="low" />
    <Message Text="##teamcity[publishArtifacts '$(BLSources)Libs\Microsoft Dynamics CRM SDK 4.0.13\PluginRegistration.exe' => Dynamics CRM\PluginRegistration']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- DeployDynamicsCrmPlugins -->
  <Target Name="DeployDynamicsCrmPlugins" DependsOnTargets="GetErmDeployIisAppPath;BuildDynamicsCrmPlugins">

    <PropertyGroup>
      <CrmProjectOutputDir>$(MsCRMPluginsProjectLocation)\bin\$(Configuration)</CrmProjectOutputDir>
    </PropertyGroup>
    
    <DoubleGis.Erm.Build.Tasks.UnregisterPluginAssembly
      CrmSdkPath="$(CrmSdkPath)"
      CrmConnectionString="$(DynamicsCrm_PublishConnectionString)"
      CrmProjectOutputDir="$(CrmProjectOutputDir)"
    />

    <DoubleGis.Erm.Build.Tasks.RegisterPluginAssembly
      CrmSdkPath="$(CrmSdkPath)"
      CrmConnectionString="$(DynamicsCrm_PublishConnectionString)"
      CrmProjectOutputDir="$(CrmProjectOutputDir)"
      ErmWebAppUrl="http://$(ErmDeployIisAppPath)/ErmService.svc"
    />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>
  
  <!-- OverwriteProductionValues -->
  <Target Name="OverwriteProductionValues"
          Condition="'$(Option_DynamicsCrm)' == 'True'"
          DependsOnTargets="UpdateErmStoredProcedures;UpdateCustomizationXml" />

  <!-- UpdateCustomizationXml -->
  <Target Name="UpdateCustomizationXml"
          DependsOnTargets="GetErmDeployIisAppPath">

    <DoubleGis.Erm.Build.Tasks.UpdateCustomizationXml
      CrmSdkPath="$(CrmSdkPath)"
      CrmConnectionString="$(DynamicsCrm_PublishConnectionString)"
      ErmWebAppUrl="https://$(ErmDeployIisAppPath)"
    />
    
    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- UpdateErmStoredProcedures -->
  <Target Name="UpdateErmStoredProcedures">

    <!-- заменяем в Erm слово DoubleGis -->
    <DoubleGis.Erm.Build.Tasks.UpdateStoredProcedures
      ErmWebAppProjectLocation="$(UIWebProjectNameLocation)"
      PublishProfileName="$(PublishProfileName)"
      SourceConnectionStringName="CrmConnection"
      TargetConnectionStringName="Erm"
    />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <Target Name="GetErmDeployIisAppPath">
    
    <DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath PublishProfilePath="$(UIWebProjectNameLocation)\Properties\PublishProfiles\$(PublishProfileFileName)">
      <Output PropertyName="ErmDeployIisAppPath" TaskParameter="DeployIisAppPath" />
    </DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath>

    <Message Text="ErmDeployIisAppPath=$(ErmDeployIisAppPath)" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- BuildErmWebApp -->
  <Target
    Name="BuildErmWebApp"
    Condition="'$(Option_Websites_WebApp)' == 'True'">

    <!-- create version file -->
    <WriteLinesToFile File="$(VersionFileName)" Lines="$(FullProductVersion)" Overwrite="true" Encoding="UTF-8"/>

    <ItemGroup>
      <!-- Erm web application -->
      <WebApplicationProject
        Include="$(UIWebProjectNameLocation)\$(UIWebProjectName).csproj">
        <AdditionalProperties>
          Configuration=$(Configuration);
          Platform=AnyCPU;
          VisualStudioVersion=$(VisualStudioVersion);
          VersionFilePath=$([System.IO.Path]::GetFullPath('$(VersionFileName)'));
          DeployOnBuild=True;
          PublishProfile=$(PublishProfileFileName)
        </AdditionalProperties>
      </WebApplicationProject>
    </ItemGroup>
    <MSBuild Projects="@(WebApplicationProject)" />
    
    <!-- add TeamCity artifact -->
    <Copy SourceFiles="$(UIWebProjectNameLocation)\DeployPackages\$(PublishProfileName)\Package.zip" DestinationFiles="$(UIWebProjectNameLocation)\DeployPackages\$(PublishProfileName)\$(UIWebProjectName)-$(ProductVersion)-$(Configuration).zip" />
    <Message Text="##teamcity[publishArtifacts '$(UIWebProjectNameLocation)\DeployPackages\$(PublishProfileName)\$(UIWebProjectName)-$(ProductVersion)-$(Configuration).zip => Web application']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- DeployErmWebApp -->
  <Target
    Name="DeployErmWebApp"
    Condition="'$(Option_Websites_WebApp)' == 'True'"
    DependsOnTargets="BuildErmWebApp;GetErmDeployIisAppPath">
    
    <DoubleGis.Erm.Build.Tasks.CreateRemoteWebsite ComputerName="$(EntryPoint_HostName)" WebsiteName="$(ErmDeployIisAppPath)" />
    
    <Exec
      Command="&quot;$(UIWebProjectNameLocation)\DeployPackages\$(PublishProfileName)\Package.deploy.cmd&quot; /Y /M:$(MsDeployServiceUrl) /A:NTLM -verbose -allowUntrusted -retryAttempts:2 -disablerule:BackupRule"
    />

    <!-- Проверяем доступность -->
    <DoubleGis.Erm.Build.Tasks.GetUri
      Condition="!$(PublishProfileName.Contains('Production'))"
      Uri="https://$(ErmDeployIisAppPath)" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- BuildOrderValidationService -->
  <Target
    Name="BuildOrderValidationService"
    Condition="'$(Option_Websites_OrderValidations)' == 'True'">
    
    <!-- create version file -->
    <WriteLinesToFile File="$(VersionFileName)" Lines="$(FullProductVersion)" Overwrite="true" Encoding="UTF-8"/>

    <ItemGroup>
      <OrderValidationServiceProject
        Include="$(OrderValidationServiceProjectLocation)\$(OrderValidationProjectName).csproj">
        <AdditionalProperties>
          Configuration=$(Configuration);
          Platform=AnyCPU;
          VisualStudioVersion=$(VisualStudioVersion);
          VersionFilePath=$([System.IO.Path]::GetFullPath('$(VersionFileName)'));
          DeployOnBuild=True;
          PublishProfile=$(PublishProfileFileName)
        </AdditionalProperties>
      </OrderValidationServiceProject>
      
    </ItemGroup>
    <MSBuild Projects="@(OrderValidationServiceProject)" />

    <!-- add TeamCity artifact -->
    <Copy SourceFiles="$(OrderValidationServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.zip" DestinationFiles="$(OrderValidationServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(OrderValidationProjectName)-$(ProductVersion)-$(Configuration).zip" />
    <Message Text="##teamcity[publishArtifacts '$(OrderValidationServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(OrderValidationProjectName)-$(ProductVersion)-$(Configuration).zip => Services']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- DeployOrderValidationService -->
  <Target
    Name="DeployOrderValidationService"
    Condition="'$(Option_Websites_OrderValidations)' == 'True'"
    DependsOnTargets="BuildOrderValidationService">

    <DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath PublishProfilePath="$(OrderValidationServiceProjectLocation)\Properties\PublishProfiles\$(PublishProfileFileName)">
      <Output PropertyName="OrderValidationServiceDeployIisAppPath" TaskParameter="DeployIisAppPath" />
    </DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath>

    <DoubleGis.Erm.Build.Tasks.CreateRemoteWebsite ComputerName="$(EntryPoint_HostName)" WebsiteName="$(OrderValidationServiceDeployIisAppPath)" />

    <Exec
      Command="&quot;$(OrderValidationServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.deploy.cmd&quot; /Y /M:$(MsDeployServiceUrl) /A:NTLM -verbose -allowUntrusted -retryAttempts:2 -disablerule:BackupRule"
    />

    <!-- Проверяем доступность -->
    <DoubleGis.Erm.Build.Tasks.GetUri
      Condition="!$(PublishProfileName.Contains('Production'))"
      Uri="https://$(OrderValidationServiceDeployIisAppPath)/Validate.svc" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- BuildFakeBusService -->
  <Target
    Name="BuildFakeBusService"
    Condition="'$(Option_ErmFakeBusService)' == 'True' And '$(PublishProfileName)' == 'Test.08'">
    <ItemGroup>
      <FakeBusServiceProject
        Include="$(FakeBusServiceProjectLocation)\$(FakeBusServiceProjectName).csproj">
        <AdditionalProperties>
          Configuration=$(Configuration);
          Platform=AnyCPU;
          VisualStudioVersion=$(VisualStudioVersion);
          DeployOnBuild=True;
          PublishProfile=$(PublishProfileFileName)
        </AdditionalProperties>
      </FakeBusServiceProject>

    </ItemGroup>
    <MSBuild Projects="@(FakeBusServiceProject)" />

    <!-- add TeamCity artifact -->
    <Copy SourceFiles="$(FakeBusServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.zip" DestinationFiles="$(FakeBusServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(FakeBusServiceProjectName)-$(Configuration).zip" />
    <Message Text="##teamcity[publishArtifacts '$(FakeBusServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(FakeBusServiceProjectName)-$(Configuration).zip => Services']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- DeployFakeBusService -->
  <Target
    Name="DeployFakeBusService"
    Condition="'$(Option_ErmFakeBusService)' == 'True' And '$(PublishProfileName)' == 'Test.08'"
    DependsOnTargets="BuildFakeBusService">

    <DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath PublishProfilePath="$(FakeBusServiceProjectLocation)\Properties\PublishProfiles\$(PublishProfileFileName)">
      <Output PropertyName="FakeBusServiceDeployIisAppPath" TaskParameter="DeployIisAppPath" />
    </DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath>

    <DoubleGis.Erm.Build.Tasks.CreateRemoteWebsite ComputerName="$(EntryPoint_HostName)" WebsiteName="$(FakeBusServiceDeployIisAppPath)" />

    <Exec
      Command="&quot;$(FakeBusServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.deploy.cmd&quot; /Y /M:$(MsDeployServiceUrl) /A:NTLM -verbose -allowUntrusted -retryAttempts:2 -disablerule:BackupRule"
    />
    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- BuildBasicOperationsService -->
  <Target
    Name="BuildBasicOperationsService"
    Condition="'$(Option_Websites_BasicOperations)' == 'True'">

    <!-- create version file -->
    <WriteLinesToFile File="$(VersionFileName)" Lines="$(FullProductVersion)" Overwrite="true" Encoding="UTF-8"/>

    <ItemGroup>
      <BasicOperationsServiceProject
        Include="$(BasicOperationsServiceProjectLocation)\$(OperationsProjectName).csproj">
        <AdditionalProperties>
          Configuration=$(Configuration);
          Platform=AnyCPU;
          VisualStudioVersion=$(VisualStudioVersion);
          VersionFilePath=$([System.IO.Path]::GetFullPath('$(VersionFileName)'));
          DeployOnBuild=True;
          PublishProfile=$(PublishProfileFileName)
        </AdditionalProperties>
      </BasicOperationsServiceProject>

    </ItemGroup>
    <MSBuild Projects="@(BasicOperationsServiceProject)" />

    <!-- add TeamCity artifact -->
    <Copy SourceFiles="$(BasicOperationsServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.zip" DestinationFiles="$(BasicOperationsServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(OperationsProjectName)-$(ProductVersion)-$(Configuration).zip" />
    <Message Text="##teamcity[publishArtifacts '$(BasicOperationsServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(OperationsProjectName)-$(ProductVersion)-$(Configuration).zip => Services']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- DeployBasicOperationsService -->
  <Target
    Name="DeployBasicOperationsService"
    Condition="'$(Option_Websites_BasicOperations)' == 'True'"
    DependsOnTargets="BuildBasicOperationsService">

    <DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath PublishProfilePath="$(BasicOperationsServiceProjectLocation)\Properties\PublishProfiles\$(PublishProfileFileName)">
      <Output PropertyName="BasicOperationsServiceDeployIisAppPath" TaskParameter="DeployIisAppPath" />
    </DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath>

    <DoubleGis.Erm.Build.Tasks.CreateRemoteWebsite ComputerName="$(EntryPoint_HostName)" WebsiteName="$(BasicOperationsServiceDeployIisAppPath)" />

    <Exec
      Command="&quot;$(BasicOperationsServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.deploy.cmd&quot; /Y /M:$(MsDeployServiceUrl) /A:NTLM -verbose -allowUntrusted -retryAttempts:2 -disablerule:BackupRule"
    />

    <!-- Проверяем доступность -->
    <DoubleGis.Erm.Build.Tasks.GetUri
      Condition="!$(PublishProfileName.Contains('Production'))"
      Uri="https://$(BasicOperationsServiceDeployIisAppPath)/Delete.svc" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

	<!-- BuildCostCalculationService -->
	<Target
	  Name="BuildCostCalculationService"
	  Condition="'$(Option_Websites_CostCalculation)' == 'True'">

		<!-- create version file -->
		<WriteLinesToFile File="$(VersionFileName)" Lines="$(FullProductVersion)" Overwrite="true" Encoding="UTF-8"/>

		<ItemGroup>
			<CostCalculationServiceProject
			  Include="$(CostCalculationServiceProjectLocation)\$(OperationsSpecialProjectName).csproj">
				<AdditionalProperties>
					Configuration=$(Configuration);
					Platform=AnyCPU;
					VisualStudioVersion=$(VisualStudioVersion);
					VersionFilePath=$([System.IO.Path]::GetFullPath('$(VersionFileName)'));
					DeployOnBuild=True;
					PublishProfile=$(PublishProfileFileName)
				</AdditionalProperties>
			</CostCalculationServiceProject>

		</ItemGroup>
		<MSBuild Projects="@(CostCalculationServiceProject)" />

		<!-- add TeamCity artifact -->
		<Copy SourceFiles="$(CostCalculationServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.zip" DestinationFiles="$(CostCalculationServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(OperationsSpecialProjectName)-$(ProductVersion)-$(Configuration).zip" />
		<Message Text="##teamcity[publishArtifacts '$(CostCalculationServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(OperationsSpecialProjectName)-$(ProductVersion)-$(Configuration).zip => Services']" Importance="low" />

		<OnError ExecuteTargets="HandleBuildError" />
	</Target>

	<!-- DeployCostCalculationService -->
	<Target
	  Name="DeployCostCalculationService"
	  Condition="'$(Option_Websites_CostCalculation)' == 'True'"
	  DependsOnTargets="BuildCostCalculationService">

		<DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath PublishProfilePath="$(CostCalculationServiceProjectLocation)\Properties\PublishProfiles\$(PublishProfileFileName)">
			<Output PropertyName="CostCalculationServiceDeployIisAppPath" TaskParameter="DeployIisAppPath" />
		</DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath>

		<DoubleGis.Erm.Build.Tasks.CreateRemoteWebsite ComputerName="$(EntryPoint_HostName)" WebsiteName="$(CostCalculationServiceDeployIisAppPath)" />

		<Exec
		  Command="&quot;$(CostCalculationServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.deploy.cmd&quot; /Y /M:$(MsDeployServiceUrl) /A:NTLM -verbose -allowUntrusted -retryAttempts:2 -disablerule:BackupRule"
    />

		<!-- Проверяем доступность -->
		<DoubleGis.Erm.Build.Tasks.GetUri
		  Condition="!$(PublishProfileName.Contains('Production'))"
		  Uri="https://$(CostCalculationServiceDeployIisAppPath)/Calculate.svc" />

		<OnError ExecuteTargets="HandleBuildError" />
	</Target>
  
  <!-- BuildReleasingService -->
  <Target
    Name="BuildReleasingService"
    Condition="'$(Option_Websites_Releasing)' == 'True'">

    <!-- create version file -->
    <WriteLinesToFile File="$(VersionFileName)" Lines="$(FullProductVersion)" Overwrite="true" Encoding="UTF-8"/>

    <ItemGroup>
      <ReleasingServiceProject
        Include="$(ReleasingProjectLocation)\$(ReleasingProjectName).csproj">
        <AdditionalProperties>
          Configuration=$(Configuration);
          Platform=AnyCPU;
          VisualStudioVersion=$(VisualStudioVersion);
          VersionFilePath=$([System.IO.Path]::GetFullPath('$(VersionFileName)'));
          DeployOnBuild=True;
          PublishProfile=$(PublishProfileFileName)
        </AdditionalProperties>
      </ReleasingServiceProject>

    </ItemGroup>
    <MSBuild Projects="@(ReleasingServiceProject)" />

    <!-- add TeamCity artifact -->
    <Copy SourceFiles="$(ReleasingProjectLocation)\DeployPackages\$(PublishProfileName)\Package.zip" DestinationFiles="$(ReleasingProjectLocation)\DeployPackages\$(PublishProfileName)\$(ReleasingProjectName)-$(ProductVersion)-$(Configuration).zip" />
    <Message Text="##teamcity[publishArtifacts '$(ReleasingProjectLocation)\DeployPackages\$(PublishProfileName)\$(ReleasingProjectName)-$(ProductVersion)-$(Configuration).zip => Services']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>
  
  <!-- DeployReleasingService -->
  <Target
    Name="DeployReleasingService"
    Condition="'$(Option_Websites_Releasing)' == 'True'"
    DependsOnTargets="BuildReleasingService">

    <DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath PublishProfilePath="$(ReleasingProjectLocation)\Properties\PublishProfiles\$(PublishProfileFileName)">
      <Output PropertyName="ReleasingServiceDeployIisAppPath" TaskParameter="DeployIisAppPath" />
    </DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath>

    <DoubleGis.Erm.Build.Tasks.CreateRemoteWebsite ComputerName="$(EntryPoint_HostName)" WebsiteName="$(ReleasingServiceDeployIisAppPath)" />

    <Exec
      Command="&quot;$(ReleasingProjectLocation)\DeployPackages\$(PublishProfileName)\Package.deploy.cmd&quot; /Y /M:$(MsDeployServiceUrl) /A:NTLM -verbose -allowUntrusted -retryAttempts:2 -disablerule:BackupRule"
    />

    <!-- Проверяем доступность -->
    <DoubleGis.Erm.Build.Tasks.GetUri
      Condition="!$(PublishProfileName.Contains('Production'))"
      Uri="https://$(ReleasingServiceDeployIisAppPath)/Release.svc" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>
  
  <!-- BuildMoneyDistributionService -->
  <Target
    Name="BuildMoneyDistributionService"
    Condition="'$(Option_Websites_MoneyDistribution)' == 'True'">
    
    <ItemGroup>
      <MoneyDistributionServiceProject
        Include="$(MoneyDistributionServiceProjectLocation)\$(MoDiProjectName).csproj">
        <AdditionalProperties>
          Configuration=$(Configuration);
          Platform=AnyCPU;
          VisualStudioVersion=$(VisualStudioVersion);
          VersionFilePath=$([System.IO.Path]::GetFullPath('$(VersionFileName)'));
          DeployOnBuild=True;
          PublishProfile=$(PublishProfileFileName)
        </AdditionalProperties>
      </MoneyDistributionServiceProject>
    </ItemGroup>
    <MSBuild Projects="@(MoneyDistributionServiceProject)" />
  
    <!-- add TeamCity artifact -->
    <Copy SourceFiles="$(MoneyDistributionServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.zip" DestinationFiles="$(MoneyDistributionServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(MoDiProjectName)-$(ProductVersion)-$(Configuration).zip" />
    <Message Text="##teamcity[publishArtifacts '$(MoneyDistributionServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(MoDiProjectName)-$(ProductVersion)-$(Configuration).zip => Services']" Importance="low" />
  
    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- DeployMoneyDistributionService -->
  <Target
    Name="DeployMoneyDistributionService"
    Condition="'$(Option_Websites_MoneyDistribution)' == 'True'"
    DependsOnTargets="BuildMoneyDistributionService">

    <DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath PublishProfilePath="$(MoneyDistributionServiceProjectLocation)\Properties\PublishProfiles\$(PublishProfileFileName)">
      <Output PropertyName="MoneyDistributionServiceDeployIisAppPath" TaskParameter="DeployIisAppPath" />
    </DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath>

    <DoubleGis.Erm.Build.Tasks.CreateRemoteWebsite ComputerName="$(EntryPoint_HostName)" WebsiteName="$(MoneyDistributionServiceDeployIisAppPath)" />

    <Exec
      Command="&quot;$(MoneyDistributionServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.deploy.cmd&quot; /Y /M:$(MsDeployServiceUrl) /A:NTLM -verbose -allowUntrusted -retryAttempts:2 -disablerule:BackupRule"
    />

    <!-- Проверяем доступность -->
    <DoubleGis.Erm.Build.Tasks.GetUri
      Condition="!$(PublishProfileName.Contains('Production'))"
      Uri="https://$(MoneyDistributionServiceDeployIisAppPath)/Reports.svc" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- BuildMetadataService -->
  <Target
    Name="BuildMetadataService"
    Condition="'$(Option_Websites_MetadataService)' == 'True'">

    <!-- create version file -->
    <WriteLinesToFile File="$(VersionFileName)" Lines="$(FullProductVersion)" Overwrite="true" Encoding="UTF-8"/>

    <ItemGroup>
      <MetadataServiceProject
        Include="$(MetadataServiceProjectLocation)\$(MetadataProjectName).csproj">
        <AdditionalProperties>
          Configuration=$(Configuration);
          Platform=AnyCPU;
          VisualStudioVersion=$(VisualStudioVersion);
          VersionFilePath=$([System.IO.Path]::GetFullPath('$(VersionFileName)'));
          DeployOnBuild=True;
          PublishProfile=$(PublishProfileFileName)
        </AdditionalProperties>
      </MetadataServiceProject>

    </ItemGroup>
    <MSBuild Projects="@(MetadataServiceProject)" />

    <!-- add TeamCity artifact -->
    <Copy SourceFiles="$(MetadataServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.zip" DestinationFiles="$(MetadataServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(MetadataProjectName)-$(ProductVersion)-$(Configuration).zip" />
    <Message Text="##teamcity[publishArtifacts '$(MetadataServiceProjectLocation)\DeployPackages\$(PublishProfileName)\$(MetadataProjectName)-$(ProductVersion)-$(Configuration).zip => Services']" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- DeployMetadataService -->
  <Target
    Name="DeployMetadataService"
    Condition="'$(Option_Websites_MetadataService)' == 'True'"
    DependsOnTargets="BuildMetadataService">

    <DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath PublishProfilePath="$(MetadataServiceProjectLocation)\Properties\PublishProfiles\$(PublishProfileFileName)">
      <Output PropertyName="MetadataServiceDeployIisAppPath" TaskParameter="DeployIisAppPath" />
    </DoubleGis.Erm.Build.Tasks.GetDeployIisAppPath>

    <DoubleGis.Erm.Build.Tasks.CreateRemoteWebsite ComputerName="$(EntryPoint_HostName)" WebsiteName="$(MetadataServiceDeployIisAppPath)" />
    
    <Exec
      Command="&quot;$(MetadataServiceProjectLocation)\DeployPackages\$(PublishProfileName)\Package.deploy.cmd&quot; /Y /M:$(MsDeployServiceUrl) /A:NTLM -verbose -allowUntrusted -retryAttempts:2 -disablerule:BackupRule"
    />

    <!-- Проверяем доступность -->
    <DoubleGis.Erm.Build.Tasks.GetUri
      Condition="!$(PublishProfileName.Contains('Production'))"
      Uri="https://$(MetadataServiceDeployIisAppPath)/Metadata.svc" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- BuildDatabaseMigrations -->
  <Target Name="BuildDatabaseMigrations">

    <PropertyGroup>
      <DatabaseMigrationsProperties>
        Configuration=$(Configuration);
        Platform=AnyCPU;
        VisualStudioVersion=$(VisualStudioVersion);
        OutputPath=$(DatabaseMigrationsCommonOutputPath)
      </DatabaseMigrationsProperties>
    </PropertyGroup>

    <ItemGroup>
      <DatabaseMigrationsProject
        Include="$(MigratorProjectLocation)\$(MigratorProjectName).csproj">
        <AdditionalProperties>
          $(DatabaseMigrationsProperties)
        </AdditionalProperties>
      </DatabaseMigrationsProject>
      <DatabaseMigrationsImplProject
        Include="$(BLMigrationsImplsProjectLocation)\$(BLMigrationsImplsProjectName).csproj">
        <AdditionalProperties>
          $(DatabaseMigrationsProperties)
        </AdditionalProperties>
      </DatabaseMigrationsImplProject>
    </ItemGroup>
    <MSBuild Projects="@(DatabaseMigrationsProject);@(DatabaseMigrationsImplProject)" />

    <!-- add TeamCity artifact -->
    <Message Text="##teamcity[publishArtifacts '$(DatabaseMigrationsCommonOutputPath) => Database migrations']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>
  
  <!-- DeployDatabaseMigrations -->
  <Target Name="DeployDatabaseMigrations"
          Condition="'$(Option_Websites_WebApp)' == 'True'"
          DependsOnTargets="BuildDatabaseMigrations;BuildErmWebApp"
  >

    <PropertyGroup>
      <TransformedWebConfig>$(UIWebProjectNameLocation)\obj\$(Configuration)\ProfileTransformWebConfig\transformed\Web.config</TransformedWebConfig>
    </PropertyGroup>
    
    <Exec Command="&quot;$(DatabaseMigrationsCommonOutputPath)\$(MigratorProjectName).exe&quot; -config=&quot;$(TransformedWebConfig)&quot; -u" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- DeployDatabaseMigrationsErmOnly -->
  <Target Name="DeployDatabaseMigrationsErmOnly" DependsOnTargets="BuildDatabaseMigrations">

    <PropertyGroup>
      
      <!-- хардкод -->
      <DatabasePublishServer>uk-erm-test06.2gis.local</DatabasePublishServer>
      <Erm_DatabaseName>Erm23</Erm_DatabaseName>
      <DatabasePublishConnectionString>Data Source=$(DatabasePublishServer)%3BIntegrated Security=True%3BPooling=False</DatabasePublishConnectionString>

    </PropertyGroup>

    <Exec Command="&quot;$(DatabaseMigrationsCommonOutputPath)\$(MigratorProjectName).exe&quot; -ermonly=&quot;$(DatabasePublishConnectionString);Initial Catalog=$(Erm_DatabaseName)&quot; -u"  />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>
  
  <!-- BuildErmTaskService -->
  <Target
    Name="BuildErmTaskService"
    Condition="'$(Option_ErmTaskService)' == 'True'">

    <PropertyGroup>
      <DefineConstantsOverrides>ProductVersion=$(ProductVersion);PublishProfileName=$(PublishProfileName)</DefineConstantsOverrides>
    </PropertyGroup>

    <!-- build ERM task service installer project, we can't set 'Platform' property since this caused an error -->
    <ItemGroup>
      <WixInstallProject
        Include="$(TaskServiceInstallerProjectLocation)\$(TaskServiceInstallerProjectName).wixproj">
        <AdditionalProperties>
          Configuration=$(Configuration);
          OutputName=$(TaskServiceInstallerFileNameWithoutExtension)
        </AdditionalProperties>
      </WixInstallProject>
    </ItemGroup>
    <MSBuild
      Projects="@(WixInstallProject)"
      Properties="PublishProfileName=$(PublishProfileName);DefineConstantsOverrides=$([MSBuild]::Escape($(DefineConstantsOverrides)))"
    />
    
    <!-- add TeamCity artifact -->
    <Message Text="##teamcity[publishArtifacts '$(TaskServiceInstallerProjectLocation)\bin\$(TaskServicePlatform)\$(Configuration)\$(TaskServiceInstallerFileNameWithExtension)' => Task service']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>
  
  <!-- DeployErmTaskService -->
  <Target
    Name="DeployErmTaskService"
    Condition="'$(Option_ErmTaskService)' == 'True'"
    DependsOnTargets="BuildErmTaskService">

    <PropertyGroup>
      <MsiDeployPackagePath>$(TaskServiceInstallerProjectLocation)\bin\$(TaskServicePlatform)\$(Configuration)\$(TaskServiceInstallerFileNameWithExtension)</MsiDeployPackagePath>
      <MsiDeployPackageAbsolutePath>$([System.IO.Path]::GetFullPath('$(MsiDeployPackagePath)'))</MsiDeployPackageAbsolutePath>
    </PropertyGroup>

    <!-- copy msi to target machine -->
    <Exec
      Command="&quot;$(MsDeployPath)&quot; -verbose -verb:sync -source:filePath='$(MsiDeployPackageAbsolutePath)' -dest:filePath='C:\Windows\Temp\$(TaskServiceInstallerFileNameWithExtension)',ComputerName='$(MsDeployServiceUrl)',AuthType='NTLM' -disableLink:AppPoolExtension -disableLink:ContentExtension -disableLink:CertificateExtension -allowUntrusted -retryAttempts=2 -disablerule:BackupRule"
    />

    <!-- stop service, install msi on target machine -->
    <PropertyGroup>
      <ScriptBlock>
        #Requires -Version 3.0
        $ErrorActionPreference = [System.Management.Automation.ActionPreference]::Stop
        Set-StrictMode -Version Latest

        $service = Get-Service -Include "$(PublishProfileName)"
        if ($service -ne $null -and $service.Status -eq "Running"){
          $service.Stop()
        }

        cmd.exe /c msiexec.exe -i C:\Windows\Temp\$(TaskServiceInstallerFileNameWithExtension) -quiet -norestart /l*v C:\Windows\Temp\$(TaskServiceInstallerFileNameWithExtension).log 

        $service = Get-Service -Include "$(PublishProfileName)"
        if ($service -ne $null -and "$(PublishProfileName)" -eq "Test.08"){
          $service.Start()
        }

      </ScriptBlock>
    </PropertyGroup>
    <DoubleGis.Erm.Build.Tasks.RemoteScriptBlock
      ComputerName="$(EntryPoint_HostName)"
      ScriptBlock="$(ScriptBlock)"
    />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- DeployReports -->
  <PropertyGroup>
    <DeployReportsDependsOn>
      DeployRptFiles;
      UpdateReportsToErmStoredProcedures;
      UpdateReportsToCrmStoredProcedures
    </DeployReportsDependsOn>
  </PropertyGroup>
  <Target
    Name="DeployReports"
    Condition="'$(Option_Reports)' == 'True'"
    DependsOnTargets="$(DeployReportsDependsOn)"
  />

  <!-- DeployRptFiles -->
  <Target Name="DeployRptFiles">
    <DoubleGis.Erm.Build.Tasks.DeployRpt
      ErmWebAppProjectLocation="$(UIWebProjectNameLocation)"
      PublishProfileName="$(PublishProfileName)"
      ReportsProjectLocation="$(ReportsProjectLocation)"
      OptionDynamicsCrm = "$(Option_DynamicsCrm)"
    />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- UpdateReportsToErmStoredProcedures -->
  <Target Name="UpdateReportsToErmStoredProcedures">
    <!-- заменяем в ErmReports слово Erm -->
    <DoubleGis.Erm.Build.Tasks.UpdateStoredProcedures
      ErmWebAppProjectLocation="$(UIWebProjectNameLocation)"
      PublishProfileName="$(PublishProfileName)"
      SourceConnectionStringName="Erm"
      TargetConnectionStringName="ErmReports"
    />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- UpdateReportsToCrmStoredProcedures -->
  <Target Name="UpdateReportsToCrmStoredProcedures"
    Condition="'$(Option_DynamicsCrm)' == 'True'">
    
    <DoubleGis.Erm.Build.Tasks.UpdateStoredProcedures
      ErmWebAppProjectLocation="$(UIWebProjectNameLocation)"
      PublishProfileName="$(PublishProfileName)"
      SourceConnectionStringName="CrmConnection"
      TargetConnectionStringName="ErmReports"
    />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- AddAdditionalBuildArtifacts -->
  <Target Name="AddAdditionalBuildArtifacts">

    <!-- add TeamCity artifact -->
    <Message Text="##teamcity[publishArtifacts '$([System.IO.Path]::GetFullPath('how to deploy.txt'))']" Importance="low" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- BuildUnitTests target -->
  <Target Name="BuildUnitTests">

    <!-- unit test projects -->
    <ItemGroup>
      <UnitTestsProject
        Include="$(PlatformUnitTestsProjectLocation)\$(PlatformUnitTestsProjectName).csproj;$(BLUnitTestsProjectLocation)\$(BLUnitTestsProjectName).csproj;$(BLFlexUnitTestsProjectLocation)\$(BLFlexUnitTestsProjectName).csproj">
        <AdditionalProperties>
          Configuration=$(Configuration);
          Platform=AnyCPU;
          VisualStudioVersion=$(VisualStudioVersion)
        </AdditionalProperties>
      </UnitTestsProject>
    </ItemGroup>

    <MSBuild Projects="@(UnitTestsProject)" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>
  
  <!-- BuildIntegrationInProcTests target -->
  <Target Name="BuildIntegrationInProcTests">

    <!-- integration inproc test projects -->
    <ItemGroup>
      <IntegrationInProcTestsProject
        Include="$(IntegrationInProTestsProjectLocation)\$(IntegrationInProcTestsProjectName).csproj;">
        <AdditionalProperties>
          Configuration=$(Configuration);
          Platform=AnyCPU;
          VisualStudioVersion=$(VisualStudioVersion)
        </AdditionalProperties>
      </IntegrationInProcTestsProject>
    </ItemGroup>

    <MSBuild Projects="@(IntegrationInProcTestsProject)" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>
  
  <!-- ExecuteIntegrationInProcTests target -->
  <Target Name="ExecuteIntegrationInProcTests" DependsOnTargets="BuildIntegrationInProcTests; DeployWebsites">
    <Exec Command="&quot;$(IntegrationInProTestsProjectLocation)\bin\$(Configuration)\$(IntegrationInProcTestsProjectName).exe&quot; -buildscript "  />
    
    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- BuildFunctionalTests target -->
  <Target Name="BuildBLFunctionalTests">
    <MSBuild Projects="$(BLFunctionalTestsProjectLocation)\$(BLFunctionalTestsProjectName).csproj" />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- BuildBLIntegrationTests target -->
  <Target Name="BuildBLIntegrationTests">
    <MSBuild Projects="$(BLIntegrationTestsProjectLocation)\$(BLIntegrationTestsProjectName).csproj" />
    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- CleanCodeMetrics -->
  <Target Name="CleanCodeMetrics">

    <Exec
      Command="rd /s /q CodeMetrics"
      ContinueOnError="true"
    />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>

  <!-- CodeMetrics -->
  <Target Name="CodeMetrics" DependsOnTargets="CleanCodeMetrics">

    <Exec
      Command="mkdir CodeMetrics"
      ContinueOnError="true"
    />

    <!-- Code Metrics Power Tool analysis -->
    <Exec
      Command="&quot;$(VS100COMNTOOLS)\..\..\Team Tools\Static Analysis Tools\FxCop\Metrics.exe&quot; /searchgac /file:&quot;$(UIWebProjectNameLocation)\bin\2Gis*.dll&quot; /out:&quot;CodeMetrics\CodeMetrics.xml&quot;"
      ContinueOnError = "true"
    />
    <Exec
      Command="&quot;..\tools\msxsl.exe&quot; &quot;CodeMetrics\CodeMetrics.xml&quot; &quot;..\tools\MSTest_CodeCoverageTools\CodeMetrics.xsl&quot; -o &quot;CodeMetrics\CodeMetrics.html&quot;"
    />

    <OnError ExecuteTargets="HandleBuildError" />
  </Target>
  
  <!-- HelloTarget -->
  <Target Name="HelloTarget">
    <Message Importance="high" Text="Вы запустили билдскрипт системы ERM без укзания цели, укажите цель" />
  </Target>

  <!-- HandleBuildError -->
  <Target Name="HandleBuildError">
    <WriteLinesToFile File="buildreport.txt" Lines="Во время билда возникла ошибка, обратитесь к разработчикам." />
  </Target>

</Project>
