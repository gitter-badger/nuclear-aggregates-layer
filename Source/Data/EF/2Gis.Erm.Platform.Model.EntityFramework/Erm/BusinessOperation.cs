//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable RedundantUsingDirective
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable ConvertNullableToShortForm

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using DoubleGis.Erm.Model.Entities.Interfaces;
using DoubleGis.Erm.Model.Entities.Interfaces.Integration;
using DoubleGis.Erm.Model.Entities.ChangeTracking;


namespace DoubleGis.Erm.Model.Entities.Erm
{
    [System.CodeDom.Compiler.GeneratedCode("EF 4.0 STE generator", "1.0")]
    [DataContract(IsReference = true)]
    [KnownType(typeof(ExportBusinessOperation))]
    
    
      public sealed partial class BusinessOperation: 
    	  IObjectWithChangeTracker
    	, INotifyPropertyChanged
        
        , IEntityKey
        
        
        
        
    	  
        
        {
        #region Custom interfaces implementation
      
        #endregion

        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
          
        [DataMember]
        public int OperationName
        {
            get { return _operationName; }
            set
            {
                if (_operationName != value)
                {
                    ChangeTracker.RecordOriginalValue("OperationName", _operationName);
                    _operationName = value;
                    OnPropertyChanged("OperationName");
                }
            }
        }
        private int _operationName;
          
        [DataMember]
        public int EntityName
        {
            get { return _entityName; }
            set
            {
                if (_entityName != value)
                {
                    ChangeTracker.RecordOriginalValue("EntityName", _entityName);
                    _entityName = value;
                    OnPropertyChanged("EntityName");
                }
            }
        }
        private int _entityName;
          
        [DataMember]
        public int EntityId
        {
            get { return _entityId; }
            set
            {
                if (_entityId != value)
                {
                    ChangeTracker.RecordOriginalValue("EntityId", _entityId);
                    _entityId = value;
                    OnPropertyChanged("EntityId");
                }
            }
        }
        private int _entityId;
          
        [DataMember]
        public System.DateTime Date
        {
            get { return _date; }
            set
            {
                if (_date != value)
                {
                    ChangeTracker.RecordOriginalValue("Date", _date);
                    _date = value;
                    OnPropertyChanged("Date");
                }
            }
        }
        private System.DateTime _date;
          
        #endregion

        #region Navigation Properties
            [DataMember]
        public ExportBusinessOperation ExportBusinessOperation
        {
            get { return _exportBusinessOperation; }
            set
            {
                if (!ReferenceEquals(_exportBusinessOperation, value))
                {
                    var previousValue = _exportBusinessOperation;
                    _exportBusinessOperation = value;
                    FixupExportBusinessOperation(previousValue);
                    OnNavigationPropertyChanged("ExportBusinessOperation");
                }
            }
        }
        private ExportBusinessOperation _exportBusinessOperation;

        #endregion

        #region ChangeTracking
    
        private void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        private void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        private bool IsDeserializing { get; set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        private void ClearNavigationProperties()
        {
            ExportBusinessOperation = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupExportBusinessOperation(ExportBusinessOperation previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (ExportBusinessOperation != null)
            {
                ChangeTracker.ObjectStateChanging += ExportBusinessOperation.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.BusinessOperation, this))
            {
                previousValue.BusinessOperation = null;
            }
    
            if (ExportBusinessOperation != null)
            {
                ExportBusinessOperation.BusinessOperation = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ExportBusinessOperation")
                    && (ChangeTracker.OriginalValues["ExportBusinessOperation"] == ExportBusinessOperation))
                {
                    ChangeTracker.OriginalValues.Remove("ExportBusinessOperation");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ExportBusinessOperation", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (ExportBusinessOperation != null && !ExportBusinessOperation.ChangeTracker.ChangeTrackingEnabled)
                {
                    ExportBusinessOperation.StartTracking();
                }
            }
        }

        #endregion

    }
}

// ReSharper enable RedundantUsingDirective
// ReSharper enable InconsistentNaming
// ReSharper enable PartialTypeWithSinglePart
// ReSharper enable RedundantNameQualifier
// ReSharper enable ConvertNullableToShortForm

