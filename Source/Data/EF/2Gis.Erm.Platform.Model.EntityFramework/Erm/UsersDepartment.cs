//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable RedundantUsingDirective
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable ConvertNullableToShortForm

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using DoubleGis.Core.Data;
using DoubleGis.Core.Integration;

namespace DoubleGis.Erm.Core
{
    [System.CodeDom.Compiler.GeneratedCode("EF 4.0 STE generator", "1.0")]
    [DataContract(IsReference = true)]
    [KnownType(typeof(UserFunctionalPrivilege))]
    [KnownType(typeof(UserTerritoriesOrganizationUnits))]
    
    
      public partial class UsersDepartment: 
    	  IObjectWithChangeTracker
    	, INotifyPropertyChanged
        
        , IOwnerDepartment
        
        
        
        
        
    	  
        
        {
        #region Custom interfaces implementation
      
        #endregion

        #region Primitive Properties
    
        [DataMember]
        [EntityKey]
        public int OwnerCode
        {
            get { return _ownerCode; }
            set
            {
                if (_ownerCode != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OwnerCode' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _ownerCode = value;
                    OnPropertyChanged("OwnerCode");
                }
            }
        }
        private int _ownerCode;
          
        [DataMember]
        
        public string Account
        {
            get { return _account; }
            set
            {
                if (_account != value)
                {
                    ChangeTracker.RecordOriginalValue("Account", _account);
                    _account = value;
                    OnPropertyChanged("Account");
                }
            }
        }
        private string _account;
          
        [DataMember]
        
        public string DisplayName
        {
            get { return _displayName; }
            set
            {
                if (_displayName != value)
                {
                    ChangeTracker.RecordOriginalValue("DisplayName", _displayName);
                    _displayName = value;
                    OnPropertyChanged("DisplayName");
                }
            }
        }
        private string _displayName;
          
        [DataMember]
        
        public int DepartmentCode
        {
            get { return _departmentCode; }
            set
            {
                if (_departmentCode != value)
                {
                    ChangeTracker.RecordOriginalValue("DepartmentCode", _departmentCode);
                    _departmentCode = value;
                    OnPropertyChanged("DepartmentCode");
                }
            }
        }
        private int _departmentCode;
          
        #endregion

        #region Navigation Properties
            [DataMember]
        [EntityRelation("UserFunctionalPrivilegeUsersDepartment", RelationMultiplicity.Many, "OwnerCode", "OwnerCode")]
        public TrackableCollection<UserFunctionalPrivilege> UserFunctionalPrivileges
        {
            get
            {
                if (_userFunctionalPrivileges == null)
                {
                    _userFunctionalPrivileges = new TrackableCollection<UserFunctionalPrivilege>();
                    _userFunctionalPrivileges.CollectionChanged += FixupUserFunctionalPrivileges;
                }
                return _userFunctionalPrivileges;
            }
            set
            {
                if (!ReferenceEquals(_userFunctionalPrivileges, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userFunctionalPrivileges != null)
                    {
                        _userFunctionalPrivileges.CollectionChanged -= FixupUserFunctionalPrivileges;
                    }
                    _userFunctionalPrivileges = value;
                    if (_userFunctionalPrivileges != null)
                    {
                        _userFunctionalPrivileges.CollectionChanged += FixupUserFunctionalPrivileges;
                    }
                    OnNavigationPropertyChanged("UserFunctionalPrivileges");
                }
            }
        }
        private TrackableCollection<UserFunctionalPrivilege> _userFunctionalPrivileges;
            [DataMember]
        [EntityRelation("UserTerritoriesOrganizationUnitsUsersDepartment", RelationMultiplicity.Many, "OwnerCode", "OwnerCode")]
        public TrackableCollection<UserTerritoriesOrganizationUnits> UserTerritoriesOrganizationUnits
        {
            get
            {
                if (_userTerritoriesOrganizationUnits == null)
                {
                    _userTerritoriesOrganizationUnits = new TrackableCollection<UserTerritoriesOrganizationUnits>();
                    _userTerritoriesOrganizationUnits.CollectionChanged += FixupUserTerritoriesOrganizationUnits;
                }
                return _userTerritoriesOrganizationUnits;
            }
            set
            {
                if (!ReferenceEquals(_userTerritoriesOrganizationUnits, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userTerritoriesOrganizationUnits != null)
                    {
                        _userTerritoriesOrganizationUnits.CollectionChanged -= FixupUserTerritoriesOrganizationUnits;
                    }
                    _userTerritoriesOrganizationUnits = value;
                    if (_userTerritoriesOrganizationUnits != null)
                    {
                        _userTerritoriesOrganizationUnits.CollectionChanged += FixupUserTerritoriesOrganizationUnits;
                    }
                    OnNavigationPropertyChanged("UserTerritoriesOrganizationUnits");
                }
            }
        }
        private TrackableCollection<UserTerritoriesOrganizationUnits> _userTerritoriesOrganizationUnits;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            UserFunctionalPrivileges.Clear();
            UserTerritoriesOrganizationUnits.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupUserFunctionalPrivileges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserFunctionalPrivilege item in e.NewItems)
                {
                    item.UsersDepartment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserFunctionalPrivileges", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserFunctionalPrivilege item in e.OldItems)
                {
                    if (ReferenceEquals(item.UsersDepartment, this))
                    {
                        item.UsersDepartment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserFunctionalPrivileges", item);
                    }
                }
            }
        }
    
        private void FixupUserTerritoriesOrganizationUnits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserTerritoriesOrganizationUnits item in e.NewItems)
                {
                    item.UsersDepartment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserTerritoriesOrganizationUnits", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserTerritoriesOrganizationUnits item in e.OldItems)
                {
                    if (ReferenceEquals(item.UsersDepartment, this))
                    {
                        item.UsersDepartment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserTerritoriesOrganizationUnits", item);
                    }
                }
            }
        }

        #endregion

    }
}

// ReSharper enable RedundantUsingDirective
// ReSharper enable InconsistentNaming
// ReSharper enable PartialTypeWithSinglePart
// ReSharper enable RedundantNameQualifier
// ReSharper enable ConvertNullableToShortForm

