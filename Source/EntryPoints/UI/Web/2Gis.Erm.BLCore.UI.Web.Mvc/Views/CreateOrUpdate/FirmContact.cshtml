
@model FirmContactViewModel

@{
    Layout = "../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script type="text/javascript">
        window.InitPage = function ()
        {
            window.Card.on("afterbuild", function ()
            {
                if (Ext.getDom("ContactType").value == "Email")
                    var v = new Ext.ux.LinkField(
                    {
                        applyTo: 'Contact',
                        contactTypeCfg: Ext.ux.LinkField.prototype.contactTypeRegistry.email,
                        listeners:
                            {
                                invalid: function (el, msg)
                                {
                                    this.validator.updateValidationMessage({ FieldName: 'Contact', ValidationMessageId: 'Contact_validationMessage' }, msg);
                                },
                                valid: function (el)
                                {
                                    this.validator.updateValidationMessage({ FieldName: 'Contact', ValidationMessageId: 'Contact_validationMessage' }, '');
                                },
                                scope: this
                            }
                    });
                if (Ext.getDom("ContactType").value == "Website")
                    var v = new Ext.ux.LinkField(
                    {
                        applyTo: 'Contact',
                        contactTypeCfg: Ext.ux.LinkField.prototype.contactTypeRegistry.url,
                        listeners:
                            {
                                invalid: function (el, msg)
                                {
                                    this.validator.updateValidationMessage({ FieldName: 'Contact', ValidationMessageId: 'Contact_validationMessage' }, msg);
                                },
                                valid: function (el)
                                {
                                    this.validator.updateValidationMessage({ FieldName: 'Contact', ValidationMessageId: 'Contact_validationMessage' }, '');
                                },
                                scope: this
                            }
                    });
            });
        }
    </script>
}

@section CardBody
{
    @Html.HiddenFor(m => m.Id)
    <div class="Tab" id="Div2" title="@BLResources.GeneralTabTitle">
        <div class="row-wrapper">
            @Html.TemplateField(m => m.ContactType, FieldFlex.twins, new Dictionary<string, object> { { "disabled", "disabled" } }, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Contact, FieldFlex.twins)
        </div>
    </div>
}