@model ContactViewModel

@{
    Layout = "../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script type="text/javascript">
        window.InitPage = function ()
        {
            Card.on("beforebuild", function ()
            {
                if (Ext.getDom("Id").value != 0)
                {
                    // change owner
                    this.ChangeOwner = function ()
                    {
                        var params = "dialogHeight:270px; dialogWidth:650px; status:yes; scroll:no; resizable:no; ";
                        var sUrl = "/GroupOperation/Assign/Contact";
                        var result = window.showModalDialog(sUrl, [Ext.getDom("Id").value], params);
                        if (result === true)
                        {
                            this.refresh(true);
                        }
                    };

                }
            });
            Card.on("afterbuild", function ()
            {
                Ext.get("Gender").on("change", function (s, e)
                {
                    Card.refillSalutationComboBox(e.value, null);
                });

                // После загрузки страницы, выставляем значение поля "Обращение".
                Card.refillSalutationComboBox(Ext.get("Gender").getValue(), Card.initialSalutation);
                Card.initialSalutation = null;

            } /* end of afterbuild*/);

            Ext.apply(this, {
                addOption: function (oListbox, text, value, isSelected)
                {
                    var oOption = document.createElement("option");
                    oOption.appendChild(document.createTextNode(text));
                    oOption.setAttribute("value", value);
                    if (isSelected)
                        oOption.selected = true;
                    oListbox.appendChild(oOption);
                },
                refillSalutationComboBox: function (genderValue, selectedValue)
                {
                    var salutationDom = Ext.getDom("Salutation");
                    salutationDom.length = 0;

                    var response = window.Ext.Ajax.syncRequest({
                        method: 'POST',
                        url: '/Contact/GetSalutations',
                        params: {
                            gender: genderValue
                        }
                    });
                    if ((response.conn.status >= 200 && response.conn.status < 300) || (Ext.isIE && response.conn.status == 1223))
                    {
                        var result = Ext.decode(response.conn.responseText);
                        Card.addOption(salutationDom, "", "");
                        for (var i = 0; i < result.length; i++)
                        {
                            var isSelected = selectedValue != null ? result[i] == selectedValue : i == 0;
                            Card.addOption(salutationDom, result[i], result[i], isSelected);
                        }
                    }
                    else
                    {
                        Card.AddNotification(response.conn.responseText, 'CriticalError', messageId);
                    }
                }
            });

            Card.initialSalutation = '@Model.Salutation';
        }
    </script>
}

@section CardBody
{
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ReplicationCode)
    @Html.HiddenFor(m => m.FullName)

    @* used to create dynamics crm activities *@
    @Html.HiddenFor(m => m.ClientReplicationCode)
    @Html.HiddenFor(m => m.ClientName)

    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Gender, FieldFlex.twins, null, EnumResources.ResourceManager)
            @Html.TemplateField(m => m.MainPhoneNumber, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Salutation, FieldFlex.twins, new Dictionary<string, object>{{"combobox", "true"}})
            @Html.TemplateField(m => m.MobilePhoneNumber, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.LastName, FieldFlex.twins)
            @Html.TemplateField(m => m.AdditionalPhoneNumber, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.FirstName, FieldFlex.twins)
            @Html.TemplateField(m => m.Fax, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.MiddleName, FieldFlex.twins)
            @Html.TemplateField(m => m.WorkEmail, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Client, FieldFlex.twins, new LookupSettings { EntityName = EntityName.Client, ReadOnly =  Model != null && Model.Client != null && !string.IsNullOrEmpty(Model.Client.Value) })
            @Html.TemplateField(m => m.Im, FieldFlex.twins)
        </div>
        @Html.SectionHead("SectionHead1", @BLResources.TitleServiceInformation)
        <div class="row-wrapper">
            @Html.TemplateField(m => m.JobTitle, FieldFlex.twins)
            @Html.TemplateField(m => m.AccountRole, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Department, FieldFlex.twins)
            @Html.TemplateField(m => m.IsFired, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.WorkAddress, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Comment, FieldFlex.lone, new Dictionary<string, object>{{"rows", "3"}})
        </div>
        @Html.SectionHead("SectionHead2", @BLResources.AdditionalTabTitle)
        <div class="row-wrapper">
            @Html.TemplateField(m => m.FamilyStatus, FieldFlex.twins, null, EnumResources.ResourceManager)
            @Html.TemplateField(m => m.BirthDate, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.HomeEmail, FieldFlex.twins)
            @Html.TemplateField(m => m.Website , FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.HomePhoneNumber, FieldFlex.twins)
        </div>
    </div>
}