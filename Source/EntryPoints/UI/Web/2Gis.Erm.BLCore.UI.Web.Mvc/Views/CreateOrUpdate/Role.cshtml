
@model RoleViewModel

@{
    Layout = "../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script type="text/javascript">
        window.InitPage = function ()
        {
            this.on('beforepost', function ()
            {
                this.genericSave(this.submitMode);
                return false;
            });
            Ext.apply(this, {
                genericSave: function (submitMode)
                {
                    if (this.ReadOnly)
                    {
                        this.AddNotification(Ext.LocalizedResources.CardIsReadOnly, "Notification", "CardIsReadOnly");
                        return;
                    }
                    var card = this;
                    var continuation = function ()
                    {
                        card.submitMode = submitMode;
                        if (card.normalizeForm() !== false)
                        {
                            card.postForm();
                        }
                    };

                    var failure = function ()
                    {
                        // TODO {all, 18.12.2013}: возможно некоректное отображение диакритики
                        // TODO {all, 18.12.2013}: alert можно заменить на ext'овый messagebox
                        // TODO {all, 18.12.2013}: ресурс можно перенести в ClientResourceStorage
                        alert('@BLResources.SaveError');
                        card.Items.Toolbar.enable();
                    };

                    var entityPrivilegeIFrame = Ext.getDom('RoleEntityPrivilege_frame');
                    var functionalPrivilegeIFrame = Ext.getDom('RoleFunctionalPrivilege_frame');

                    if (entityPrivilegeIFrame && !functionalPrivilegeIFrame)
                    {
                        entityPrivilegeIFrame.contentWindow.BeforeSave(continuation, failure);
                    } else if (!entityPrivilegeIFrame && functionalPrivilegeIFrame)
                    {
                        functionalPrivilegeIFrame.contentWindow.BeforeSave(continuation, failure);
                    } else if (entityPrivilegeIFrame && functionalPrivilegeIFrame)
                    {
                        var currentContinuation = function ()
                        {
                            functionalPrivilegeIFrame.contentWindow.BeforeSave(continuation, failure);
                        };
                        entityPrivilegeIFrame.contentWindow.BeforeSave(currentContinuation, failure);
                    } else
                    {
                        continuation();
                    }
                }
            });
        };
    </script>
}

@section CardBody
{
    @Html.HiddenFor(m => m.IdentityServiceUrl)
    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">
        <div class="row-wrapper">
            @Html.EditableId(m => m.Id)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Name, FieldFlex.lone)
        </div>
    </div>
}