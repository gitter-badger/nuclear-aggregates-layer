@using Platform.Common.Utils

@model Models.GroupOperation.OwnerGroupOperationViewModel

@{
    Layout = "../Shared/_DialogLayout.cshtml";
}

@section Title { @BLResources.Qualify }
@section TopBarTitle { @BLResources.QualifyClient }
@section TopBarMessage { @string.Format(BLResources.GroupOperationTopBarMessage, Model.EntityTypeName.ToStringLocalized(EnumResources.ResourceManager, EnumResources.Culture)) }

@section PageContent
{
    <link rel="stylesheet" type="text/css" href="/Content/Progress.css?@SolutionInfo.ProductVersion.Build" />

    <script src="/Scripts/Ext.Ajax.syncRequest.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
    <script src="/Scripts/DoubleGis.UI.GroupOperations.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>

    <script type="text/javascript">
        Ext.namespace('Ext.DoubleGis.UI.Client');
        Ext.DoubleGis.UI.Client.QualifyProcessor = Ext.extend(Ext.DoubleGis.UI.GroupProcessor, {
            OwnerCode: 0,
            UserCodeLookup: {},
            constructor: function (config)
            {
                Ext.apply(config, {
                    listeners: {
                        configspecificcontrols: function ()
                        {
                            this.ConfigCustomControls();
                        },
                        applyusersettings: function ()
                        {
                            this.ApplyUserSettings();
                        }
                    }
                });
                Ext.DoubleGis.UI.Client.QualifyProcessor.superclass.constructor.call(this, config);
            },
            ConfigCustomControls: function ()
            {
                var onRadioClick = this.RadioClick.createDelegate(this);
                Ext.get("rdoAssignToMe").on("click", onRadioClick);
                Ext.get("rdoAssignToUser").on("click", onRadioClick);
                this.UserCodeLookup = Ext.getCmp("UserCode");
            },
            RadioClick: function ()
            {
                if (Ext.getDom("rdoAssignToMe").checked)
                {
                    this.UserCodeLookup.disable();
                }
                else if (Ext.getDom("rdoAssignToUser").checked)
                {
                    this.UserCodeLookup.enable();
                }
            },
            IsUserSettingsValid: function ()
            {
                if (Ext.getDom("rdoAssignToUser").checked)
                {
                    if (Ext.getDom("UserCode").value == "")
                    {
                        Ext.MessageBox.show({
                            title: '',
                            // TODO {all, 18.12.2013}: возможно некоректное отображение диакритики
                            // TODO {all, 18.12.2013}: ресурс можно перенести в ClientResourceStorage
                            msg: '@BLResources.QualifyMustPickUser',
                            buttons: window.Ext.MessageBox.OK,
                            width: 300,
                            icon: window.Ext.MessageBox.ERROR
                        });
                        return false;
                    }
                }
                return true;
            },
            CheckForDebtsAndProcess: function () {
                if (this.Config.Entities.length) {

                    // waitbox заменён на Mask, поскольку от первого в некоторых случаях у ie сносило крышу:
                    // ExtJs при обработке задач использует функции setInterval/clearInterval и вот последний не отрабатывал как надо: обработчик продолжал вызываться.
                    // Внешне это выглядело как неограниченное число вызовов обработчиков, зарегистрированных через Ext.onReady.
                    var waitMask = new Ext.LoadMask(Ext.getBody());
                    waitMask.show();

                    var checkUrl = Ext.BasicOperationsServiceRestUrl + 'CheckForDebts.svc/Rest/Client/' + Ext.encode(this.Config.Entities);
                    var response = window.Ext.Ajax.syncRequest({
                        timeout: 1200000,
                        url: checkUrl,
                        method: 'POST'
                    });

                    waitMask.hide();

                    if ((response.conn.status >= 200 && response.conn.status < 300) || (Ext.isIE && response.conn.status == 1223)) {
                        var checkResult = Ext.decode(response.conn.responseText);

                        if (checkResult.DebtsExist) {
                            Ext.MessageBox.show({
                                title: Ext.LocalizedResources.Alert,
                                msg: Ext.LocalizedResources.SomeOfTheClientsHaveDebtsAlert + "\r\n" + checkResult.Message,
                                width: 300,
                                buttons: window.Ext.MessageBox.ContinueCANCEL,
                                processor: this,
                                fn: function(buttonId, value, opt) {
                                    if (buttonId == 'Continue') {
                                        opt.processor.Process();
                                    } else {
                                        window.close();
                                    }
                                },
                                icon: window.Ext.MessageBox.QUESTION
                            });
                        } else {
                            this.Process();
                        }
                    } else {
                        Ext.MessageBox.show({
                            title: Ext.LocalizedResources.Alert,
                            msg: Ext.LocalizedResources.CheckClientsDebtsFailed,
                            width: 300,
                            buttons: window.Ext.MessageBox.ContinueCANCEL,
                            processor: this,
                            fn: function(buttonId, value, opt) {
                                if (buttonId == 'Continue') {
                                    opt.processor.Process();
                                } else {
                                    window.close();
                                }
                            },
                            icon: window.Ext.MessageBox.QUESTION
                        });
                    }
                } else {
                    window.close();
                }
            },
            ApplyUserSettings: function ()
            {
                this.OwnerCode = Ext.getDom("rdoAssignToUser").checked ? this.UserCodeLookup.getValue().id : "";

                Ext.getDom("rdoAssignToMe").disabled = "disabled";
                Ext.getDom("rdoAssignToUser").disabled = "disabled";
                this.UserCodeLookup.disable();
            },
            CreateParamsForControllerCall: function (entityId)
            {
                return  { entityId: entityId, ownerCode: this.OwnerCode };
            }
        });
        Ext.onReady(function ()
        {
            var ids;
            if (window.dialogArguments) {
                ids = window.dialogArguments.Values ? window.dialogArguments.Values : window.dialogArguments;
            } else {
                var queryParameters = Ext.urlDecode(window.location.search.substring(1));
                ids = queryParameters.CrmIds.split(',');
            }

            var config = {
                Entities: ids, // массив id сущностей
                OperationName: '@Model.OperationName', // тип операции - Qualify, Assign, ChangeTerritory
                CloseButtonText: '@BLResources.Close', // локализованная надпись для кнопки закрыть
                NeedToSelectOneOrMoreItemsMsg: '@BLResources.NeedToSelectOneOrMoreItems', // локализованная надпись о том что нужно выбрать один или несколько элементов
                ResultMessageTitle: '@BLResources.GroupOperationResultsTitle', // локализованная надпись - заголовок для результатов операции
                ResultMessageTemplate: '@BLResources.GroupOperationResultsMessage' // локализованная надпись - шаблон строки для результатов операции
            };
            var qualifyProcessor = new Ext.DoubleGis.UI.Client.QualifyProcessor(config);
            if (!qualifyProcessor.CheckProcessingPossibility())
            {
                return;
            }
            qualifyProcessor.CheckForDebtsAndProcess();
        }, window, { single: true });
    </script>
    @using (Html.BeginForm(null, null, null, FormMethod.Post, new Dictionary<string, object> { { "id", "EntityForm" } }))
    {
    <table cellspacing="5" cellpadding="5" width="100%" height="100%">
        <colgroup>
            <col width="26" />
            <col />
        </colgroup>
        <tbody id="qualifysettings">
            <tr>
                <td colspan="2">
                    <div style="height: 24px;" id="Notifications">@Model.Message</div>
                </td>
            </tr>
            <tr>
                <td valign="top">
                    <input id="rdoAssignToMe" class="radio" checked="checked" type="radio" name="AssignedUser" />
                </td>
                <td valign="top">
                    <label style="font-weight: bold" for="rdoAssignTome">@BLResources.QualifyAssignToMe</label>
                    <br />
                    <div style="color: #444444; padding-top: 5px">@BLResources.QualifyAssignToMeClientLegend</div>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    &nbsp;
                </td>
            </tr>
            <tr>
                <td valign="top">
                    <input id="rdoAssignToUser" class="radio" type="radio" name="AssignedUser" />
                </td>
                <td valign="top">
                    <label style="font-weight: bold" for="rdoAssignToUser">@BLResources.QualifyAssignToOtherUser</label>
                    <br />
                    <div style="padding-bottom: 10px; color: #444444; padding-top: 5px">
                        <label for="rdoAssignToUser">@BLResources.QualifyAssignToOtherUserClientLegend</label>
                    </div>
                    <table style="table-layout: fixed" cellspacing="0" cellpadding="0" width="100%">
                        <tbody>
                            <tr>
                                <td>
                                    @Html.LookupFor(k => k.UserCode, new LookupSettings { Disabled = true, EntityName = EntityName.User, ExtendedInfo = "'hideReserveUser=true'"})
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr style="display:none;">
                <td colspan="2">
                    @Html.HiddenFor(m => m.EntityTypeName)
                </td>
            </tr>
        </tbody>
        <tbody>
            <tr>
                <td colspan="2" style="padding-left: 10px;">
                    <div id="pbDiv">
                        <div id="pbInner">
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
    }
}