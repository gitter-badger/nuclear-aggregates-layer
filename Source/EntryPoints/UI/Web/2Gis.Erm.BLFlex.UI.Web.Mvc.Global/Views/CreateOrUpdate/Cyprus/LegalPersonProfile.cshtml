@model DoubleGis.Erm.BLFlex.UI.Web.Mvc.Global.Models.Cyprus.CyprusLegalPersonProfileViewModel

@{
    Layout = "../../Shared/_CardLayout.cshtml";
}

@section CardScripts
{    
    <script type="text/javascript">
        window.InitPage = function() {
            window.Card.on("afterbuild", function() {
                var operatesValues = document.getElementById('OperatesOnTheBasisInGenitive').getElementsByTagName('option');
                var disabledValues = @Html.Raw(Json.Encode(Model.DisabledDocuments));
                for (var i = 0; i < disabledValues.length; i++) {
                    for (var j = 0; j < operatesValues.length; j++) {
                        if (operatesValues[j].value == disabledValues[i] || (disabledValues[i] == 'Undefined' && operatesValues[j].value == '')) {
                            operatesValues[j].disabled = true;
                            break;
                        }
                    }
                }
            });
        };
    </script>   
}

@section CardBody
{    
    @Html.HiddenFor(m => m.LegalPersonType)
    @Html.HiddenFor(m => m.Id)

    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Name, FieldFlex.lone)
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.LegalPerson, FieldFlex.lone, new LookupSettings { EntityName = EntityName.LegalPerson, ReadOnly = true })
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.DocumentsDeliveryAddress, FieldFlex.lone)
        </div>

        <div class="row-wrapper">
            @Html.TemplateField(m => m.RecipientName, FieldFlex.twins)
            @Html.TemplateField(m => m.DocumentsDeliveryMethod, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>

        <div class="row-wrapper">
            @Html.TemplateField(m => m.PersonResponsibleForDocuments, FieldFlex.twins)
            @Html.TemplateField(m => m.EmailForAccountingDocuments, FieldFlex.twins)
        </div>

        <div class="row-wrapper">
            @Html.TemplateField(m => m.AdditionalEmail, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.PostAddress, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.PaymentMethod, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.AccountNumber, FieldFlex.twins)
            @Html.TemplateField(m => m.BankName, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.IBAN, FieldFlex.twins)
            @Html.TemplateField(m => m.SWIFT, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.AdditionalPaymentElements, FieldFlex.lone, new Dictionary<string, object> { { "rows", 5 } })
        </div>

        @Html.SectionHead("sectionInfo", @BLResources.TitleEmployeeInformation)

        <div class="row-wrapper">
            @Html.TemplateField(m => m.ChiefNameInNominative, FieldFlex.twins)
            @Html.TemplateField(m => m.PositionInNominative, FieldFlex.twins)
        </div>
    
        <div class="row-wrapper">
            @Html.HiddenFor(m => m.ChiefNameInGenitive)
            @Html.HiddenFor(m => m.PositionInGenitive)
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Phone, FieldFlex.twins)
            @Html.TemplateField(m => m.OperatesOnTheBasisInGenitive, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.CertificateNumber, FieldFlex.twins)
            @Html.TemplateField(m => m.CertificateDate, FieldFlex.twins, new DateTimeSettings { ShiftOffset = false })
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.WarrantyNumber, FieldFlex.twins)
        </div>
        
        <div class="row-wrapper">
            @Html.TemplateField(m => m.RegistrationCertificateNumber, FieldFlex.twins)
            @Html.TemplateField(m => m.RegistrationCertificateDate, FieldFlex.twins, new DateTimeSettings { ShiftOffset = false })
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.WarrantyBeginDate, FieldFlex.twins, new DateTimeSettings { ShiftOffset = false })
            @Html.TemplateField(m => m.WarrantyEndDate, FieldFlex.twins, new DateTimeSettings { ShiftOffset = false })
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.BargainNumber, FieldFlex.lone)
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.BargainBeginDate, FieldFlex.twins, new DateTimeSettings { ShiftOffset = false })
            @Html.TemplateField(m => m.BargainEndDate, FieldFlex.twins, new DateTimeSettings { ShiftOffset = false })
        </div>
    </div>
}

    