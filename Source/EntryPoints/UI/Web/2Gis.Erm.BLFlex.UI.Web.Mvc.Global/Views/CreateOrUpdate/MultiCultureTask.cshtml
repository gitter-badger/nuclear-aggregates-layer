@using BLCore.UI.Web.Mvc.Utils
@model Models.MultiCultureTaskViewModel

@{
    Layout = "../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script src="/Scripts/Ext.ux.TimeComboBox.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
    <script src="/Scripts/Ext.DoubleGis.UI.ActivityBase.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
    <style type="text/css">
        div.label-wrapper {
            width: 180px !important;
        }
    </style>
}

@section CardBody
{
    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">
        <br />
        <div style="display: none">
            @Html.HiddenFor(m => m.Id)
        </div>

        @{
            var readonlyFieldHtmlAttributes = new Dictionary<string, object> { { "class", "readonly inputfields" }, { "readonly", "readonly" } };
        }

        @Html.SectionHead("planHeader", BLResources.TitlePlan)
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Type, FieldFlex.twins, readonlyFieldHtmlAttributes, EnumResources.ResourceManager)
            @Html.TemplateField(m => m.TaskType, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Header, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            <div class="display-wrapper field-wrapper twins" id="ScheduledStart-wrapper">
                <div class="label-wrapper">
                    <span>
                        @Html.LabelFor(m => m.ScheduledStart)
                    </span>
                </div>
                <div class="input-wrapper">
                    <table cellpadding="0" cellspacing="0">
                        <tbody>
                            <tr>
                                <td style="width: 120px">
                                    @Html.DateFor(m => m.ScheduledStart, new DateTimeSettings { ShiftOffset = false })
                                    @Html.ValidationMessageFor(m => m.ScheduledStart, null, new Dictionary<string, object> { { "class", "error" } })
                                </td>
                                <td style="width: 5px"></td>
                                <td style="width: 60px">
                                    @Html.TextBoxFor(m => m.ScheduledStartTime, new Dictionary<string, object> { { "class", "timepicker inputfields" } })
                                </td>
                                <td style="width: auto"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row-wrapper">
            <div class="display-wrapper field-wrapper twins" id="ScheduledEnd-wrapper">
                <div class="label-wrapper">
                    <span>
                        @Html.LabelFor(m => m.ScheduledEnd)
                    </span>
                </div>
                <div class="input-wrapper">
                    <table cellpadding="0" cellspacing="0">
                        <tbody>
                            <tr>
                                <td style="width: 120px">
                                    @Html.DateFor(m => m.ScheduledEnd, new DateTimeSettings { ShiftOffset = false })
                                    @Html.ValidationMessageFor(m => m.ScheduledEnd, null, new Dictionary<string, object> { { "class", "error" } })
                                </td>
                                <td style="width: 5px"></td>
                                <td style="width: 60px">
                                    @Html.TextBoxFor(m => m.ScheduledEndTime, new Dictionary<string, object> { { "class", "timepicker inputfields" } })
                                </td>
                                <td style="width: auto"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row-wrapper">
            <div class="display-wrapper field-wrapper twins" id="ActualEnd-wrapper">
                <div class="label-wrapper">
                    <span>
                        @Html.LabelFor(m => m.ActualEnd)
                    </span>
                </div>
                <div class="input-wrapper">
                    <table cellpadding="0" cellspacing="0">
                        <tbody>
                            <tr>
                                <td style="width: 120px">
                                    @Html.DateFor(m => m.ActualEnd, new DateTimeSettings { ShiftOffset = false })
                                    @Html.ValidationMessageFor(m => m.ActualEnd, null, new Dictionary<string, object> { { "class", "error" } })
                                </td>
                                <td style="width: 5px"></td>
                                <td style="width: 60px">
                                    @Html.TextBoxFor(m => m.ActualEndTime, new Dictionary<string, object> { { "class", "timepicker inputfields" } })
                                </td>
                                <td style="width: auto"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Duration, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Priority, FieldFlex.twins, null, EnumResources.ResourceManager)
            @Html.TemplateField(m => m.Status, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Description, FieldFlex.lone, new Dictionary<string, object> { { "rows", "5" } })
        </div>
        @Html.SectionHead("planHeader", BLResources.TitleRegarding)
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Client, FieldFlex.twins, new LookupSettings { EntityName = EntityName.Client })
            @Html.TemplateField(m => m.Firm, FieldFlex.twins, new LookupSettings { EntityName = EntityName.Firm, ExtendedInfo = "filterToParent=true", ParentEntityName = EntityName.Client, ParentIdPattern = "ClientId" })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Contact, FieldFlex.twins, new LookupSettings { EntityName = EntityName.Contact, ExtendedInfo = "filterToParent=true", ParentEntityName = EntityName.Client, ParentIdPattern = "ClientId" })
        </div>
    </div>
}

@RenderBody()
