@using BLCore.UI.Web.Mvc.Utils
@model Models.Chile.ChileLegalPersonProfileViewModel

@{
    Layout = "../../Shared/_CardLayout.cshtml";
}

@section CardScripts
{    
    <script type="text/javascript">
        window.InitPage = function() {
            window.Card.on("afterbuild", function() {
                var operatesValues = document.getElementById('OperatesOnTheBasisInGenitive').getElementsByTagName('option');
                var disabledValues = @Html.Raw(Json.Encode(Model.DisabledDocuments));
                for (var i = 0; i < disabledValues.length; i++) {
                    var optionToDisable = operatesValues[disabledValues[i]];
                    optionToDisable.disabled = true;
                }
            });
        };
    </script>   
}

@section CardBody
{    
    @Html.HiddenFor(m => m.Id)

    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Name, FieldFlex.lone)
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.LegalPerson, FieldFlex.lone, new LookupSettings { EntityName = EntityName.LegalPerson, ReadOnly = true })
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.DocumentsDeliveryAddress, FieldFlex.lone)
        </div>

        <div class="row-wrapper">
            @Html.TemplateField(m => m.RecipientName, FieldFlex.twins)
            @Html.TemplateField(m => m.DocumentsDeliveryMethod, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>

        <div class="row-wrapper">
            @Html.TemplateField(m => m.PersonResponsibleForDocuments, FieldFlex.twins)
            @Html.TemplateField(m => m.EmailForAccountingDocuments, FieldFlex.twins)
        </div>

        <div class="row-wrapper">
            @Html.TemplateField(m => m.AdditionalEmail, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.PostAddress, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.PaymentMethod, FieldFlex.twins, null, EnumResources.ResourceManager)
            @Html.TemplateField(m => m.BankAccountType, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.AccountNumber, FieldFlex.twins)
            @Html.TemplateField(m => m.Bank, FieldFlex.twins, new LookupSettings { EntityName = EntityName.Bank })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.AdditionalPaymentElements, FieldFlex.lone, new Dictionary<string, object> { { "rows", 5 } })
        </div>

        @Html.SectionHead("sectionInfo", @BLResources.TitleEmployeeInformation)

        <div class="row-wrapper">
            @Html.TemplateField(m => m.RepresentativeName, FieldFlex.twins)
            @Html.TemplateField(m => m.RepresentativeRut, FieldFlex.twins)
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.RepresentativePosition, FieldFlex.lone)
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Phone, FieldFlex.twins)
            @Html.TemplateField(m => m.OperatesOnTheBasisInGenitive, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
    
        <div class="row-wrapper">
            @Html.TemplateField(m => m.RepresentativeDocumentIssuedOn, FieldFlex.twins, new DateTimeSettings { ShiftOffset = false })
            @Html.TemplateField(m => m.RepresentativeDocumentIssuedBy, FieldFlex.twins)
        </div>
    </div>
}

    