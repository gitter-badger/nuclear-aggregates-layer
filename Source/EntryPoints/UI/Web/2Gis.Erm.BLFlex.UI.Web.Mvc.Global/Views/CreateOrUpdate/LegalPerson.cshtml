@using BLCore.UI.Web.Mvc.Utils
@model Models.LegalPersonViewModel

@{
    Layout = "../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script type="text/javascript">
        window.InitPage = function() {
            window.Card.on("beforebuild", function(card) {
                Ext.apply(this, {
                    ChangeLegalPersonClient: function() {
                        var params = "dialogWidth:" + 500 + "px; dialogHeight:" + 250 + "px; status:yes; scroll:no;resizable:no;";
                        var url = '/GroupOperation/ChangeClient/LegalPerson';
                        window.showModalDialog(url, [Ext.getDom("Id").value], params);
                        this.refresh();
                    },

                    ChangeLegalPersonRequisites: function() {
                        var params = "dialogWidth:" + 700 + "px; dialogHeight:" + 250 + "px; status:yes; scroll:no;resizable:no;";
                        var url = '/Russia/LegalPerson/ChangeLegalPersonRequisites/' + Ext.getDom("Id").value;
                        var result = window.showModalDialog(url, null, params);
                        if (result == 'OK') {
                            var isInSyncWith1C = window.Ext.getDom("IsInSyncWith1C").value;
                            // TODO {all, 18.12.2013}: возможно некоректное отображение диакритики
                            // TODO {all, 18.12.2013}: ресурс можно перенести в ClientResourceStorage
                            var msg = isInSyncWith1C.toLowerCase() == 'true' ? '@BLResources.OnLegalPersonRequisitesChangedMessageSync1C' : '@BLResources.OnLegalPersonRequisitesChangedMessageNotSync1C';
                            window.Ext.MessageBox.show({
                                title: '',
                                msg: msg,
                                buttons: window.Ext.MessageBox.OK,
                                fn: function() { this.refresh(true); },
                                scope: this,
                                width: 500,
                                icon: window.Ext.MessageBox.INFO
                            });
                        }
                    },

                    Merge: function() {
                        var params = "dialogWidth:" + 700 + "px; dialogHeight:" + 350 + "px; status:yes; scroll:yes;resizable:yes;";
                        var url = '/Russia/LegalPerson/Merge?masterId={0}';
                        window.showModalDialog(String.format(url, Ext.getDom("Id").value), null, params);
                        this.refresh(true);
                    }
                });

            });
            window.Card.on("afterbuild", function(card) {
                if (window.Ext.getDom("ViewConfig_Id").value && window.Ext.getDom("ViewConfig_Id").value != "0") {
                    this.Items.TabPanel.add(
                        {
                            xtype: "actionshistorytab",
                            pCardInfo:
                            {
                                pTypeName: this.Settings.EntityName,
                                pId: window.Ext.getDom("ViewConfig_Id").value
                            }
                        });
                }
            });

            Ext.apply(this, {

                buildProfilesList: function () {
                    if (this.form.Id.value != 0) {
                        var cnt = Ext.getCmp('ContentTab_holder');
                        var tp = Ext.getCmp('TabWrapper');

                        tp.anchor = "100%, 60%";
                        delete tp.anchorSpec;
                        cnt.add(new Ext.Panel({
                            id: 'profileFrame_holder',
                            anchor: '100%, 40%',
                            html: '<iframe id="profileFrame_frame"></iframe>'
                        }));
                        cnt.doLayout();
                        var mask = new window.Ext.LoadMask(window.Ext.get("profileFrame_holder"));
                        mask.show();
                        var iframe = Ext.get('profileFrame_frame');

                        iframe.dom.src = '/Grid/View/LegalPersonProfile/LegalPerson/{0}/{1}/?filterInfo=LegalPersonId%3D{0}'.replace(/\{0\}/g, this.form.Id.value).replace(/\{1\}/g, this.ReadOnly ? 'Inactive' : 'Active');
                        iframe.on('load', function (evt, el) {
                            el.height = Ext.get(el.parentElement).getComputedHeight();
                            el.width = Ext.get(el.parentElement).getComputedWidth();
                            el.style.height = "100%";
                            el.style.width = "100%";
                            el.contentWindow.Ext.onReady(function () {
                                el.contentWindow.IsBottomOrderPositionDataList = true;
                            });
                            this.hide();
                        }, mask);
                        cnt.doLayout();

                    }
                }
            });

            this.on("afterbuild", this.buildProfilesList, this);
            this.on("afterrelatedlistready", function(card, details) {
                var dataListName = details.dataList.currentSettings.Name;

                if (dataListName === 'LegalPersonProfile') {
                    var dataListWindow = details.dataList.ContentContainer.container.dom.document.parentWindow;
                    if (dataListWindow.IsBottomOrderPositionDataList) {
                        dataListWindow.Ext.getDom('Toolbar').style.display = 'none';
                        details.dataList.Items.Grid.getBottomToolbar().hide();
                        details.dataList.ContentContainer.doLayout();
                    }
                }
            }, this);
        };
    </script>
    <style type="text/css">
        div.label-wrapper
        {
            width: 150px !important;
        }
    </style>    
}

@section CardBody
{
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ReplicationCode)
    @Html.HiddenFor(m => m.IsInSyncWith1C)
    @Html.HiddenFor(m => m.HasProfiles)

    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">
        <div class="row-wrapper">
            @Html.TemplateField(m => m.LegalName, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Client, FieldFlex.lone, new LookupSettings { EntityName = EntityName.Client, ReadOnly = true})
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.ShortName, FieldFlex.twins)
            @Html.TemplateField(m => m.LegalPersonType, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Inn, FieldFlex.twins)
            @Html.TemplateField(m => m.Kpp, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.BusinessmanInn, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.PassportSeries, FieldFlex.twins)
            @Html.TemplateField(m => m.PassportNumber, FieldFlex.twins)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.PassportIssuedBy, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.LegalAddress, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.RegistrationAddress, FieldFlex.lone)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Comment, FieldFlex.lone, new Dictionary<string, object>{{"rows", 3}})
        </div>
    </div>
}