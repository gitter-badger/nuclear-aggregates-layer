
@model Models.Russia.FirmViewModel

@{
    Layout = "../../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script src="/Scripts/Ext.DoubleGis.UI.Firm.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
}

@section CardBody
{
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ReplicationCode)

    @* used to create dynamics crm activities *@
    @Html.HiddenFor(m=>m.ClientReplicationCode)
    @Html.HiddenFor(m=>m.ClientName)
    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Name, FieldFlex.lone, new Dictionary<string, object> { { "readonly", "readonly" } })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Client, FieldFlex.lone, new LookupSettings { EntityName = EntityName.Client, ReadOnly = true })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Comment, FieldFlex.lone, new Dictionary<string, object>{{"rows", "5"}})
        </div>
        @Html.SectionHead("SectionHead1", BLResources.Analytics)
        <div class="row-wrapper">
            @Html.TemplateField(m => m.MarketType, FieldFlex.twins, null, EnumResources.ResourceManager)
            @Html.TemplateField(m => m.ProductType, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.UsingOtherMedia, FieldFlex.twins, null, EnumResources.ResourceManager)
            @Html.TemplateField(m => m.BudgetType, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.InCityBranchesAmount, FieldFlex.twins, null, EnumResources.ResourceManager)
            @Html.TemplateField(m => m.Geolocation, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.OutCityBranchesAmount, FieldFlex.twins, null, EnumResources.ResourceManager)
            @Html.TemplateField(m => m.StaffAmount, FieldFlex.twins, null, EnumResources.ResourceManager)
        </div>
        @Html.SectionHead("SectionHead2", BLResources.AdditionalTabTitle)
        <div class="row-wrapper">
            @Html.TemplateField(m => m.OrganizationUnit, FieldFlex.twins, new LookupSettings { EntityName = EntityName.OrganizationUnit, Disabled = true })
            @Html.TemplateField(m => m.LastQualifyTime, FieldFlex.twins, new DateTimeSettings { Disabled = true })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.PromisingScore, FieldFlex.twins, new Dictionary<string, object> { { "readonly", "readonly" } })
            @Html.TemplateField(m => m.LastDisqualifyTime, FieldFlex.twins, new DateTimeSettings { Disabled = true })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.ClosedForAscertainment, FieldFlex.twins, new Dictionary<string, object> { { "disabled", "disabled" } })
        </div>
    </div>
    <div class="Tab" id="AdministrationTab" title="@BLResources.AdministrationTabTitle">
        @Html.SectionHead("adminHeader", BLResources.AdministrationTabTitle)
        @if (Model.IsCurated && Model.IsSecurityRoot)
        {
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Owner, FieldFlex.twins, new LookupSettings { EntityName = EntityName.User, Plugins = new[] { "new Ext.ux.LookupFieldOwner()" } })
            @Html.TemplateField(m => m.Territory, FieldFlex.twins, new LookupSettings { EntityName = EntityName.Territory, ReadOnly = true })
        </div>
        }
        <div class="row-wrapper">
            @Html.TemplateField(m => m.CreatedBy, FieldFlex.twins, new LookupSettings { EntityName = EntityName.User, Disabled = true })
            @Html.TemplateField(m => m.CreatedOn, FieldFlex.twins, new DateTimeSettings { Disabled = true })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.ModifiedBy, FieldFlex.twins, new LookupSettings { EntityName = EntityName.User, Disabled = true })
            @Html.TemplateField(m => m.ModifiedOn, FieldFlex.twins, new DateTimeSettings { Disabled = true })
        </div>
    </div>
}