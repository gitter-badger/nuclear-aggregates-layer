@model PrepareJointBillViewModel

@{
    Layout = "../Shared/_DialogLayout.cshtml";
}

@section Title { @BLResources.PrepareJointBill }
@section TopBarTitle { @BLResources.PrepareJointBill }
@section TopBarMessage { @BLResources.PrepareJointBill }

@section PageContent
{
    <script src="/Scripts/Ext.grid.CheckColumn.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
    <script src="/Scripts/Ext.DoubleGis.UI.RelatedOrdersSelectorControl.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
   
    <script type="text/javascript">
        Ext.namespace('Ext.DoubleGis.UI.Bill');
        Ext.DoubleGis.UI.Bill.JointBill = Ext.extend(Object, {
            Config: {
                ProfileId: -1,
                EntityId: -1, // идентификатор сущности для которой запущено создание единого счета (заказ или счет на оплату)
                EntityName: null, // тип сущности для которой запущено создание единого счета (заказ или счет на оплату)
                RelatedOrderControlElement: null,
                RelatedOrderGridHeight: -1,
                RelatedOrderGridWidth: -1
            },
            RelatedOrderControl: null,
            RelatedOrders: null,
            constructor: function (config)
            {
                Ext.apply(this.Config, config);

                this.RelatedOrderControl = new Ext.DoubleGis.UI.RelatedOrdersSelectorControl({
                    RelatedOrderControlElement: this.Config.RelatedOrderControlElement,
                    GridHeight: this.Config.RelatedOrderGridHeight,
                    GridWidth: this.Config.RelatedOrderGridWidth
                });
            },
            GetRelatedOrdersForBillOrder: function ()
            {
                Ext.Ajax.request({
                    timeout: 1200000,
                    method: 'GET',
                    url: '/Print/GetRelatedOrdersInfoForPrintJointBill',
                    params: { orderId: this.Config.EntityId, profileId: this.Config.ProfileId },
                    success: function (xhr, options)
                    {
                        var relatedOrders = Ext.decode(xhr.responseText);
                        this.RelatedOrderControl.SetRelatedOrders(relatedOrders);
                    },
                    failure: function (xhr, options)
                    {
                        Ext.MessageBox.show({
                            title: '',
                            msg: xhr.responseText,
                            buttons: Ext.MessageBox.OK,
                            width: 300,
                            icon: Ext.MessageBox.ERROR
                        });
                    },
                    scope: this
                });
            },
            OnOrdersSelectionFinished: function ()
            {
                this.RelatedOrders = this.RelatedOrderControl.GetOrders();
                if (this.RelatedOrders.length > 0)
                {
                    if (!Ext.fly('stubDownloadForm'))
                    {
                        var frm = document.createElement('form');
                        frm.id = 'stubDownloadForm';
                        frm.name = id;
                        frm.className = 'x-hidden';
                        document.body.appendChild(frm);
                    }

                    window.Ext.Ajax.request({
                        scope: this,
                        method: 'POST',
                        url: '/Print/PrintJointBill',
                        params: {
                            id: this.Config.EntityId,
                            relatedOrders: Ext.encode(this.RelatedOrders),
                            profileId: this.Config.ProfileId
                        },
                        form: Ext.fly('stubDownloadForm'),
                        callback: function (options, success, response)
                        {
                            Ext.MessageBox.show({
                                title: '',
                                msg: response.responseText,
                                buttons: Ext.MessageBox.OK,
                                width: 300,
                                icon: Ext.MessageBox.ERROR
                            });
                        },
                        isUpload: true
                    });

                    var domCancel = Ext.getDom("Cancel");
                    domCancel.disabled = '';
                    domCancel.value = Ext.LocalizedResources.Close;
                    Ext.get("OK").setVisible(false);
                }
            },
            Prepare: function ()
            {
                //Show error messages
                if (Ext.getDom("Notifications").innerHTML.trim() != "")
                {
                    Ext.get("Notifications").addClass("Notifications");
                }

                if (Ext.getDom("IsMassBillCreateAvailable").value == 'True')
                {
                    this.GetRelatedOrdersForBillOrder();
                }

                //write eventhandlers for buttons
                Ext.get("Cancel").on("click", function () { window.close(); });
                Ext.get("OK").on("click", function () { this.OnOrdersSelectionFinished(); }, this);
            }
        });
        Ext.onReady(function ()
        {
            var config = {
                EntityId: Ext.getDom("EntityId").value,
                ProfileId: Ext.getDom("ProfileId").value,
                EntityName: Ext.getDom("EntityName").value,
                RelatedOrderControlElement: 'RelatedOrdersSelector',
                RelatedOrderGridHeight: 200,
                RelatedOrderGridWidth: 760
            };
            var jointBillReleatedOrdersSelector = new Ext.DoubleGis.UI.Bill.JointBill(config);
            jointBillReleatedOrdersSelector.Prepare();
        });
    </script>
    
    <div style="display: none">
        @Html.HiddenFor(m => m.IsMassBillCreateAvailable)
        @Html.HiddenFor(m => m.EntityId)
        @Html.HiddenFor(m => m.ProfileId)
        @Html.HiddenFor(m => m.EntityName)
    </div>
    <div style="height: 15px;display: none;" id="Notifications">
           @Model.Message
    </div>
    <div style="clear: both;">
       <div style="padding-left: 10px">
            <span style="font-weight: bold">
                @BLResources.PrepareJointBillRelatedOrdersGrid
             </span>
        </div>
        <div id="RelatedOrdersSelector" style="margin: 10px"/> 
    </div>
}