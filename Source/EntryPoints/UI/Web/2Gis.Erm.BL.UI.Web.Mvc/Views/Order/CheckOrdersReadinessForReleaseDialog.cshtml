@using System.Globalization
@using Platform.Model.Metadata.Enums

@model Models.CheckOrdersReadinessForReleaseDialogViewModel

@{
    Layout = "../Shared/_DialogLayout.cshtml";
}

@section Title { @BLResources.OrdersReadinessForReleaseReportTitle }
@section TopBarTitle { @BLResources.OrdersReadinessForReleaseReportTitle }
@section TopBarMessage { @BLResources.OrdersReadinessForReleaseReportParametersInformation }

@section PageContent
{
    <link rel="stylesheet" type="text/css" href="/Content/Ext.ux.DetailedProgressWindow.css?@SolutionInfo.ProductVersion.Build" />
    
    <script src="/Scripts/Ext.ux.DetailedProgressWindow.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
    <script src="/Scripts/Ext.ux.AsyncOperationClientManager.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>

    <script type="text/javascript">

    Ext.DoubleGis.ValidatorRegistry.validators["validatePeriod"] = function (rule)
    {
        return function (value, context)
        {
            var getValue = function (id) { return Ext.getCmp(id) ? Ext.getCmp(id).getValue() : Ext.getDom(id).value; };

            var startDate = new Date(getValue(rule.ValidationParameters.startDateField));
            var endDate = new Date(getValue(rule.ValidationParameters.endDateField));

            var expectedStartDate = new Date(startDate.getFullYear(), startDate.getMonth(), 1, 0, 0, 0, 0);

            var tmpDate = new Date((new Date(expectedStartDate.getFullYear(), expectedStartDate.getMonth() + 1, 1)) - 1);
            var expectedEndDate = new Date(tmpDate.getFullYear(), tmpDate.getMonth(), tmpDate.getDate(), 0, 0, 0, 0);

            if (startDate.getTime() != expectedStartDate.getTime())
                return false;

            if (endDate.getTime() != expectedEndDate.getTime())
                return false;

            return true;
        };
    };

    Ext.DoubleGis.ValidatorRegistry.validators["checkPeriod"] = function (rule)
    {
        return function (value, context)
        {
            var startDate = new Date(Ext.getCmp(rule.ValidationParameters.startDateField) ? Ext.getCmp(rule.ValidationParameters.startDateField).getValue() : Ext.getDom(rule.ValidationParameters.startDateField).value);
            var endDate = new Date(Ext.getCmp(rule.ValidationParameters.endDateField) ? Ext.getCmp(rule.ValidationParameters.endDateField).getValue() : Ext.getDom(rule.ValidationParameters.endDateField).value);
            return (startDate.getTime() < endDate.getTime());
        };
    };

    Ext.DoubleGis.ValidatorRegistry.validators["checkDate"] = function (rule)
    {
        return function (value, context)
        {
            var date = new Date(Ext.getCmp(rule.ValidationParameters.dateField) ? Ext.getCmp(rule.ValidationParameters.dateField).getValue() : Ext.getDom(rule.ValidationParameters.dateField).value);
            var expectedDate = new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0); //first day
            if (rule.ValidationParameters.isFirstDay == false)
            {
                var tmpDate = new Date((new Date(date.getFullYear(), date.getMonth() + 1, 1)) - 1);
                expectedDate = new Date(tmpDate.getFullYear(), tmpDate.getMonth(), tmpDate.getDate(), 0, 0, 0, 0);
            }
            return (date.getTime() == expectedDate.getTime());
        };
    };

    Ext.onReady(function ()
    {
        if (Ext.getDom('ErrorsLink'))
        {
            Ext.getDom('ErrorsLink').onclick = function ()
            {
                Ext.getDom('ErrorsForm').submit();
            };
        }

        //Show error messages
        if (Ext.getDom("Notifications").innerHTML.trim() != "")
        {
            Ext.get("Notifications").addClass("Notifications");
        }
        else
        {
            Ext.get("Notifications").removeClass("Notifications");
        }

        Ext.get("Cancel").on("click", function ()
        {
            window.close();
        });

        Ext.get("OK").on("click", function ()
        {
            if (Ext.DoubleGis.FormValidator.validate(EntityForm))
            {
                Ext.getDom("StartPeriodDate").value = new Date(Ext.getCmp("StartPeriodDate").getValue()).format(Ext.CultureInfo.DateTimeFormatInfo.PhpInvariantDateTimePattern);
                Ext.getDom("OK").disabled = true;
                EntityForm.submit();
                Ext.getDom("StartPeriodDate").value = Date.parseDate(Ext.getDom("StartPeriodDate").value, Ext.CultureInfo.DateTimeFormatInfo.PhpInvariantDateTimePattern).format(Ext.CultureInfo.DateTimeFormatInfo.PhpShortDatePattern);
            }
        });

        // Временно отключаем галку "Включая подчинённых", ERM-925
        var tt = new Ext.ToolTip({
            target: 'IncludeOwnerDescendants-wrapper',
            // TODO {all, 18.12.2013}: возможно некоректное отображение диакритики
            // TODO {all, 18.12.2013}: ресурс можно перенести в ClientResourceStorage
            html: '@BLResources.DisabledFunctionality'
        });

        Ext.each(Ext.CardLookupSettings, function (item, i)
        {
            new window.Ext.ux.LookupField(item);
        }, this);
    });

    </script>
    
    @if(Model.HasErrors == true)
    {
    <div style="height: 8px; padding-left: 5px;padding-top: 4px;position: fixed;" id="DivErrors">
        @using(Html.BeginForm("GetOperationLog", "Operation", FormMethod.Post, new Dictionary<string, object> { { "target", "_blank" }, {"id", "ErrorsForm"} }))
        {
            <input type="hidden" name="operationId" value="@Model.ErrorLogFileId" />
        }
    </div>
    }

    @using (Html.BeginForm(null, null, null, FormMethod.Post, new Dictionary<string, object> { { "id", "EntityForm" } }))
    {
        @Html.Hidden("now", DateTime.UtcNow.ToString(CultureInfo.InvariantCulture))
        <div class="Tab">
        <div style="height: 18px;" id="Notifications" class="Notifications">
            @Model.Message
            @if (Model.HasErrors == true)
            {
                <a href="#" id="ErrorsLink"> Просмотреть ошибки...</a>
            }
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.StartPeriodDate, FieldFlex.lone, new DateTimeSettings { ShiftOffset = false, PeriodType = PeriodType.MonthlyLowerBound, DisplayStyle = DisplayStyle.WithoutDayNumber })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.OrganizationUnit, FieldFlex.lone, new LookupSettings { EntityName = EntityName.OrganizationUnit, SearchFormFilterInfo = "IsDeleted=false&&IsActive=true" })
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.Owner, FieldFlex.lone, new LookupSettings { EntityName = EntityName.User})
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.IncludeOwnerDescendants, FieldFlex.lone, new Dictionary<string, object> {{"disabled", "disabled"}})
        </div>
        <div class="row-wrapper">
            @Html.TemplateField(m => m.CheckAccountBalance, FieldFlex.lone)
        </div>
    </div>
    }
}