@model MakeRegionalAdsDocsViewModel

@{
    Layout = "../Shared/_DialogLayout.cshtml";
}

@section Title { @BLResources.OutgoinRegionalAdvertismentsMakeUp }
@section TopBarTitle { @BLResources.OutgoinRegionalAdvertismentsMakeUp }
@section TopBarMessage { }

@section PageContent
{
    <script type="text/javascript">
        Ext.onReady(function () {
            if (Ext.getDom("Notifications").innerHTML.trim() == "OK") {
                window.returnValue = 'OK';
                window.close();
                return;
            } else if (Ext.getDom("Notifications").innerHTML.trim() != "") {
                Ext.getDom("Notifications").style.display = "block";
            }

            var depList = window.Ext.getDom("ViewConfig_DependencyList");
            if (depList && depList.value) {
                this.DependencyHandler = new window.Ext.DoubleGis.DependencyHandler();
                this.DependencyHandler.register(window.Ext.decode(depList.value), window.EntityForm);
                depList.value = null;
            }
            Ext.get("Cancel").on("click", function () { window.returnValue = 'CANCELED'; window.close(); });
            Ext.get("OK").on("click", function () {
                if (Ext.DoubleGis.FormValidator.validate(window.EntityForm)) {
                    Ext.getDom("OK").disabled = "disabled";
                    Ext.getDom("Cancel").disabled = "disabled";
                    EntityForm.submit();
                }
            });


            if (Ext.getDom("ResultsRetrieveForm")) {
                Ext.getDom("ResultsRetrieveForm").submit();
            }
        });
    </script>

    @if (Model.ResultOperationGuid.HasValue)
    {
        <div style="height: 8px; padding-left: 5px; padding-top: 4px; position: fixed;" id="DivErrors">
            @using (Html.BeginForm("GetOperationLog", "Operation", FormMethod.Post, new Dictionary<string, object> { { "target", "_blank" }, { "id", "ResultsRetrieveForm" } }))
            {
                <input type="hidden" name="operationId" value="@Model.ResultOperationGuid" />
            }
        </div>
    }

    @using (Html.BeginForm(null, null, null, FormMethod.Post, new Dictionary<string, object> { { "id", "EntityForm" } }))
    {
        @Html.HiddenFor(x => x.UserId);
        <div class="Tab">
            <div style="display: none; height: 15px;" id="Notifications" class="Notifications">
                @Model.Message
            </div>
            <div class="row-wrapper">
                @Html.TemplateField(m => m.StartPeriodDate, FieldFlex.lone, new CalendarSettings { Store = CalendarSettings.StoreMode.Relative, Display = CalendarSettings.DisplayMode.Month, })
            </div>
            <div class="row-wrapper">
                @Html.TemplateField(m => m.SourceOrganizationUnit, FieldFlex.lone, new LookupSettings
                                                                                             {
                                                                                                 EntityName = EntityName.OrganizationUnit,
                                                                                                 ExtendedInfo = "userId=" + Model.UserId
                                                                                             })
            </div>
        </div>
    }
}