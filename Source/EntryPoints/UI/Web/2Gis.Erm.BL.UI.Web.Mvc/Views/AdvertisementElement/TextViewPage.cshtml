@using Newtonsoft.Json
@using Platform.Model.Entities.Enums

@model Models.AdvertisementElementViewModel
@if (Model.TemplateRestrictionType == AdvertisementElementRestrictionType.FasComment)
{
    <div class="row-wrapper">
        @Html.TemplateField(m => m.FasComment, FieldFlex.lone, null, EnumResources.ResourceManager)
        @Html.Hidden("FasCommentDisplayTextItems", JsonConvert.SerializeObject(Model.FasCommentDisplayTextItems))
    </div>
}

@Html.HiddenFor(m => m.TemplateTextLengthRestriction)
@Html.HiddenFor(m => m.TemplateMaxSymbolsInWord)
@Html.HiddenFor(m => m.TemplateTextLineBreaksRestriction)

@if (Model.TemplateFormattedText)
{
    @Html.HiddenFor(m => m.PlainText)
    <div class="row-wrapper">
        <div class="display-wrapper field-wrapper lone" id="Text-wrapper">
            <div class="label-wrapper">@Html.LabelFor(m => m.FormattedText)</div>
            <div class="input-wrapper">
                
                @* в div будет рендиться tinyMCE editor *@
                <div id="TxtContainer" style="width: 600px; padding-top: 5px"></div>

                @Html.ValidationMessageFor(m => m.FormattedText, null, new Dictionary<string, object> { { "class", "error" } })

                @* Model.Text надо именно вот так в одну строчку слепливать, иначе там в tinyMCE вылезают лишние переносы строк *@
                <div id="ctnt" style="display: none;">@Model.FormattedText</div>
            </div>
        </div>
    </div>
}
else if (Model.TemplateAdvertisementLink)
{
    <div class="row-wrapper">
        @Html.TemplateField(m => m.PlainText, FieldFlex.lone, null)
    </div>
}
else
{
    <div class="row-wrapper">
        @Html.TemplateField(m => m.PlainText, FieldFlex.lone, new Dictionary<string, object> { { "rows", "15" } })
    </div>
}