@model Models.AdvertisementElementViewModel

@{
    Layout = "../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <style type="text/css">
        #TxtContainer TABLE TD
        {
            padding-bottom: 0px !important;
            padding-left: 0px !important;
            padding-right: 0px !important;
        }
        DIV.row-wrapper TABLE TD
        {
            padding-left: 5px;
        }
        TD.span-wrapper
        {
            padding-left: 10px !important;
            padding-right: 10px;
        }
        DIV.Tab TABLE
        {
            table-layout: auto;
            border-spacing: inherit;
            width: auto;
        }
        
        DIV.Tab TABLE TD
        {
            padding-bottom: inherit;
        }
    </style>
    
    @if (HttpContext.Current.IsDebuggingEnabled)
    {
        <script src="/Scripts/TinyMCE/tiny_mce_src.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
        <script src="/Scripts/Ext.ux.TinyMCE/Ext.ux.TinyMCE.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
    }
    else
    {
        <script src="/Scripts/TinyMCE/tiny_mce.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
        <script src="/Scripts/Ext.ux.TinyMCE/Ext.ux.TinyMCE.min.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
    }
    
    <script src="/Scripts/Ext.DoubleGis.UI.AdvertisementElement.js?@SolutionInfo.ProductVersion.Build" type="text/javascript"></script>
                    }

@section CardBody
{
    <div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">
        @if (Model != null)
        {
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.TemplateRestrictionType)
            @Html.HiddenFor(m => m.TemplateFormattedText)
            @Html.HiddenFor(m => m.TemplateAdvertisementLink)
            @Html.HiddenFor(m => m.TemplateFileExtensionRestriction)
            @Html.HiddenFor(m => m.TemplateImageDimensionRestriction)
            @Html.HiddenFor(m => m.CanUserChangeStatus)
            @Html.HiddenFor(m => m.NeedsValidation)
            
            // Для работы контрола отправки файлов
            @Html.HiddenFor(m => m.FileName)
            @Html.HiddenFor(m => m.FileContentType)
            @Html.HiddenFor(m => m.FileContentLength)
        }
        <div class="row-wrapper">
            @Html.TemplateField(m => m.AdvertisementElementTemplate, FieldFlex.lone, new LookupSettings { EntityName = EntityName.AdvertisementElementTemplate, ReadOnly = true })
        </div>
    
        @if (Model.NeedsValidation)
        {
            var disableIfHasNoPrivelege = Model.CanUserChangeStatus ? null : new Dictionary<string, object>() { { "disabled", "disabled" } };
            <div class="row-wrapper">
                @Html.EnumField(m => m.Status, FieldFlex.lone, disableIfHasNoPrivelege, EnumResources.ResourceManager, Model.AvailableStates != null ? Model.AvailableStates.Cast<object>() : null)
            </div>
            <div class="row-wrapper">
                @Html.TemplateField(m => m.Error, FieldFlex.lone, disableIfHasNoPrivelege, EnumResources.ResourceManager)
            </div>
        }
    

        @if (Model.TemplateRestrictionType == AdvertisementElementRestrictionType.Text || Model.TemplateRestrictionType == AdvertisementElementRestrictionType.FasComment)
        {
        Html.RenderPartial(@"~/Views/AdvertisementElement/TextViewPage.cshtml");
        }
        @if (Model.TemplateRestrictionType == AdvertisementElementRestrictionType.Article || Model.TemplateRestrictionType == AdvertisementElementRestrictionType.Image)
        {
        Html.RenderPartial(@"~/Views/AdvertisementElement/FileViewPage.cshtml");
        }
        @if (Model.TemplateRestrictionType == AdvertisementElementRestrictionType.Date)
        {
        Html.RenderPartial(@"~/Views/AdvertisementElement/DateViewPage.cshtml");
        }
    </div>
}