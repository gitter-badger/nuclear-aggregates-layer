@model AccountDetailViewModel

@{
    Layout = "../Shared/_CardLayout.cshtml";
}

@section CardScripts
{
    <script type="text/javascript">
        window.InitPage = function () {

            window.Card.on("afterbuild", function (card) {
                if (window.Ext.getDom("ViewConfig_Id").value && window.Ext.getDom("ViewConfig_Id").value != "0") {
                    this.Items.TabPanel.add(
                        {
                            xtype: "actionshistorytab",
                            pCardInfo:
                            {
                                pTypeId: this.Settings.EntityId,
                                pId: window.Ext.getDom("ViewConfig_Id").value,
                                pTypeName: Ext.get("ViewConfig_EntityName").dom.value
                            }
                        });
                }
            });
        };
    </script>
}

@section CardBody
{
<div class="Tab" id="MainTab" title="@BLResources.GeneralTabTitle">
    <div style="display: none">
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.AccountId)
    </div>
    <div class="row-wrapper">
        @Html.TemplateField(m => m.Amount, FieldFlex.twins)
        @Html.TemplateField(m => m.OperationType, FieldFlex.twins, new LookupSettings { EntityName = EntityName.OperationType, ShowReadOnlyCard = true, ReadOnly = !Model.IsNew, ExtendedInfo = "excludeSyncCode=11" })
    </div>
    <div class="row-wrapper">
        @Html.TemplateField(m => m.TransactionDate, FieldFlex.twins, new DateTimeSettings { ReadOnly = !Model.IsNew, ShiftOffset = false})
    </div>
    <div class="row-wrapper">
        @Html.TemplateField(m => m.Description, FieldFlex.lone)
    </div>
</div>
<div class="Tab" id="AdministrationTab" title="@BLResources.AdministrationTabTitle">
    @Html.SectionHead("adminHeader", BLResources.AdministrationTabTitle)
    <div class="row-wrapper">
        @Html.TemplateField(m=>m.Owner, FieldFlex.twins, new LookupSettings{EntityName = EntityName.User, ReadOnly = !Model.OwnerCanBeChanged, Plugins = new[] { "new Ext.ux.LookupFieldOwner()" } })
    </div>
    <div class="row-wrapper">
        @Html.TemplateField(m=>m.CreatedBy, FieldFlex.twins, new LookupSettings { EntityName = EntityName.User, ReadOnly = true })
        @Html.TemplateField(m => m.CreatedOn, FieldFlex.twins, new DateTimeSettings { ReadOnly = true })
    </div>
    <div class="row-wrapper">
        @Html.TemplateField(m => m.ModifiedBy, FieldFlex.twins, new LookupSettings { EntityName = EntityName.User, ReadOnly = true })
        @Html.TemplateField(m => m.ModifiedOn, FieldFlex.twins, new DateTimeSettings { ReadOnly = true })
    </div>
</div>
}
