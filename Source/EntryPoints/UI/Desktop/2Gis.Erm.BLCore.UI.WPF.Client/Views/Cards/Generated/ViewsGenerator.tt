<#@ template language="C#"  debug="true" hostSpecific="true" #>
<#@ output extension=".log" #> 

<#@ assembly name="System.Core" #>
<#@ assembly name="PresentationCore" #>
<#@ assembly name="PresentationFramework" #>
<#@ assembly name="System.Xaml" #>
<#@ assembly name="EnvDTE" #>

<#@ import namespace="EnvDTE" #> 
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Reflection" #>

<#@ assembly name="$(SolutionDir)\..\..\BLCore\Source\Resources\2Gis.Erm.BLCore.Resources.Server\bin\$(ConfigurationName)\2Gis.Erm.BLCore.Resources.Server.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\Platform\Source\2Gis.Erm.Platform.Common\bin\$(ConfigurationName)\2Gis.Erm.Platform.Common.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\Platform\Source\Model\2Gis.Erm.Platform.Model\bin\$(ConfigurationName)\2Gis.Erm.Platform.Model.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\Platform\Source\Model\2Gis.Erm.Platform.Model.Metadata\bin\$(ConfigurationName)\2Gis.Erm.Platform.Model.Metadata.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\PLatform\Source\EntryPoints\UI\Common\2Gis.Erm.Platform.UI.Metadata\bin\$(ConfigurationName)\2Gis.Erm.Platform.UI.Metadata.dll" #>
<#@ assembly name="$(SolutionDir)\..\..\BLCore\Source\EntryPoints\UI\Common\2Gis.Erm.BLCore.UI.Metadata\bin\$(ConfigurationName)\2Gis.Erm.BLCore.UI.Metadata.dll" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="$(SolutionDir)\..\..\Platform\Source\EntryPoints\UI\Desktop\2Gis.Platform.UI.WPF.Infrastructure\bin\$(ConfigurationName)\2Gis.Platform.UI.WPF.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\packages\FluentValidation-Signed.3.4.6.0\lib\Net40\FluentValidation.dll" #>

<#@ import namespace="DoubleGis.Erm.Platform.Common.Utils.Resources" #>
<#@ import namespace="DoubleGis.Erm.Platform.Model.Metadata.Entities" #>
<#@ import namespace="DoubleGis.Erm.Platform.Model.Metadata.Entities.CommonFeatures" #>
<#@ import namespace="DoubleGis.Erm.Platform.Model.Metadata.Common" #>
<#@ import namespace="DoubleGis.Erm.Platform.Model.Metadata.Entities.PropertyFeatures" #>
<#@ import namespace="DoubleGis.Erm.Platform.UI.Metadata.Config.Common.ViewModel.Features.Parts" #>

<#@ import namespace="DoubleGis.Erm.BLCore.UI.WPF.Client.PresentationMetadata.Cards" #>
<#@ import namespace="DoubleGis.Erm.BLCore.UI.WPF.Client.Views" #>
<#@ import namespace="DoubleGis.Erm.BLCore.UI.Metadata.Config.ViewModel" #>

<#@include file="Manager.ttinclude"#>
<#
var	viewsNamespace = "DoubleGis.Erm.BLCore.UI.WPF.Client.Views.Cards";

var manager = Manager.Create(Host, GenerationEnvironment);
var counter = new Stopwatch();
try
{
	counter.Start();
	WriteLine("Processing start at " + DateTime.Now);
	Process(viewsNamespace, manager);
	manager.Process(true);
}
catch (Exception ex)
{
	WriteLine(ex.Message);
	throw ex;
}
finally
{
	counter.Stop();
	WriteLine("Processing finished at " + DateTime.Now + ". Working time sec: " + counter.Elapsed.TotalSeconds);
}

#>

<#+ 
private void Process(string viewsNamespace, Manager manager)
{
	IEntityPropertiesProvider entityPropertiesProvider = new EntityPropertiesProvider();
	ICardStructuresProvider cardStructuresProvider = new CardStructuresProvider(entityPropertiesProvider);


	int cardCounter = 0;

	foreach (var entry in entityPropertiesProvider.EntityPropertiesMap)
    {
		++cardCounter;
        WriteLine(cardCounter + "). Processing card for entity " + entry.Key);
		
		var entityName = entry.Key;
		var entityProperties = entry.Value;

		CardStructure cardStructure;
        if (!cardStructuresProvider.TryGetDescriptor(entityName, out cardStructure))
        {	// не обрабатываем сущности для который нет поисания карточки
            // continue;
        }

		bool useExisting = false;
        if (cardStructure != null 
            && cardStructure.ViewModelViewMapping != null 
            && cardStructure.ViewModelViewMapping.ViewType != typeof(UseGeneratorView))
        {
            // прописан конкретный view, не являющийся маркерным для генератора View карточек => ничего генерить не нужно
            useExisting = true;
        }
		
		var viewName = entityName.ToString() + "View";
		var viewControlFileName = viewName + ".xaml";
		var viewCodeBehindFileName = viewName + ".xaml.cs";

		if (useExisting && DoesFileExist(viewControlFileName) && DoesFileExist(viewCodeBehindFileName))
        {
			WriteLine("For entity  " + entry.Key + " existing view used");
			manager.StartNewFile(viewControlFileName);
			this.Write(OutputFile(viewControlFileName));
			manager.EndBlock();
			manager.StartNewFile(viewCodeBehindFileName);
			this.Write(OutputFile(viewCodeBehindFileName));
			manager.EndBlock();
			continue;
		}

		WriteLine("For entity  " + entry.Key + " new view generating ");
        entityProperties = entityProperties.Where(x => !x.Features.OfType<HiddenFeature>().Any()).ToArray();
		
		manager.StartNewFile(viewControlFileName);
		GenerateXaml(viewsNamespace, viewName, cardStructure, entityProperties);
		manager.EndBlock();

		manager.StartNewFile(viewCodeBehindFileName);
		GenerateXamlCs(viewsNamespace, viewName);
		manager.EndBlock();
	}
}

private bool DoesFileExist(string filename)
{			
	return File.Exists(Path.Combine(GetCurrentDirectory(),filename));	
}

private string OutputFile(string filename)
{
	using(StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))
	{
		string contents = sr.ReadToEnd();
		return contents;
	}
}

private string GetCurrentDirectory()
{
	string executingDirectoryName = "";
	string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
	if (String.IsNullOrEmpty(stackTraceFileName))
	{
		throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
			", and we could not figure out the file name from the stack trace (most likely because of running " +
			"the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
	}
	else
	{		
		executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
	}	
	return executingDirectoryName;
}

private void GenerateXaml(string viewsNamespace, string viewName, CardStructure cardStructure, IEnumerable<EntityProperty> entityProperties)
{
#>
<UserControl x:Class="<#= viewsNamespace #>.<#= viewName #>"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:core="clr-namespace:DoubleGis.Platform.UI.WPF.Infrastructure.Controls;assembly=2Gis.Platform.UI.WPF.Infrastructure"
			 xmlns:focusableBinding="clr-namespace:DoubleGis.Platform.UI.WPF.Infrastructure.Util.FocusableBinding;assembly=2Gis.Platform.UI.WPF.Infrastructure"
             xmlns:controls="clr-namespace:DoubleGis.Erm.Platform.UI.WPF.Infrastructure.Presentation.Controls;assembly=2Gis.Erm.Platform.UI.WPF.Infrastructure"
			 xmlns:contextNav="clr-namespace:DoubleGis.Erm.Platform.UI.WPF.Infrastructure.ViewModel.ContextualNavigation;assembly=2Gis.Erm.Platform.UI.WPF.Infrastructure"
             xmlns:basic="clr-namespace:DoubleGis.Erm.Platform.UI.WPF.Infrastructure.Presentation.Controls.Basic;assembly=2Gis.Erm.Platform.UI.WPF.Infrastructure"
			 mc:Ignorable="d" 
             d:DesignHeight="1000" d:DesignWidth="1000">
    <UserControl.Resources>
		<ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/2Gis.Erm.BLCore.UI.WPF.Client;component/Themes/generic.xaml"></ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        </ResourceDictionary>
        
    </UserControl.Resources>
    <StackPanel Orientation="Vertical">
<#+ 
			var groupedProperties = new Dictionary<ResourceEntryKey, List<EntityProperty>>();
            var ordinaryProperties = new List<EntityProperty>();

            foreach (var entityProperty in entityProperties)
            {
                var groupedPropertyFeature = entityProperty.Features.OfType<GroupedPropertyFeature>().SingleOrDefault();
                if (groupedPropertyFeature == null)
                {
                    ordinaryProperties.Add(entityProperty);
                }
                else
                {
                    List<EntityProperty> properties;
                    if (!groupedProperties.TryGetValue(groupedPropertyFeature.EntryKey, out properties))
                    {
                        properties = new List<EntityProperty>();
                        groupedProperties.Add(groupedPropertyFeature.EntryKey, properties);
                    }

                    properties.Add(entityProperty);
                }
            }

            GenerateControlsGrid(ordinaryProperties);

            if (groupedProperties.Any())
            {
                ViewModelPartsFeature resultViewModelPartsFeature;
				if (cardStructure != null)
				{
					resultViewModelPartsFeature = cardStructure.ElementFeatures.OfType<ViewModelPartsFeature>().SingleOrDefault()
						?? ViewModelParts.Default; // пока если нет настроек для card parts - используем default
				}
				else
				{
					// пока если нет настроек для card parts - используем default
					resultViewModelPartsFeature = ViewModelParts.Default;
				}

				foreach (var part in resultViewModelPartsFeature.PartKeys)
				{
					List<EntityProperty> properties;
					if (!groupedProperties.TryGetValue(part, out properties))
					{
						continue;
					}
#>
				<HeaderedContentControl Header="{Binding}" Margin="0 15 0 0">
                    <HeaderedContentControl.Style>
                        <Style TargetType="HeaderedContentControl">
                            <Setter Property="Visibility" Value="{Binding Path=(contextNav:IContextualNavigationViewModel.Parts)[<#= part.ResourceEntryName #>].IsSelected, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                            <Setter Property="HeaderTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <basic:TitledSection Title="{Binding Localizer.<#= part.ResourceEntryName #>}" Margin="0 0 0 10">
                                            <basic:TitledSection.Style>
                                                <Style TargetType="basic:TitledSection">
                                                    <Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>
                                                    <Setter Property="SectionLineBrush" Value="{DynamicResource ModernButtonBorder}"/>
                                                    <Setter Property="TitleTextStyle" Value="{DynamicResource Emphasis}"/>
                                                    <Setter Property="Command" Value="{Binding Path=(contextNav:IContextualNavigationViewModel.Parts)[<#= part.ResourceEntryName #>].Command}"/>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="{DynamicResource ItemBackgroundHover}" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </basic:TitledSection.Style>
                                        </basic:TitledSection>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </HeaderedContentControl.Style>
<#+ 
					GenerateControlsGrid(properties);
#>
				</HeaderedContentControl>
<#+
				}
			}
#>
	</StackPanel>
</UserControl>
<#+ 
}

private void GenerateXamlCs(string viewsNamespace, string viewName)
{
#>
using System.Windows.Controls;
using DoubleGis.Erm.Platform.UI.Metadata.Indicators;

namespace <#= viewsNamespace #>
{
    public partial class <#= viewName #> : UserControl, IView
    {
        public <#= viewName #>()
        {
            InitializeComponent();
        }
    }
}
<#+
}

private void GenerateControlsGrid(IEnumerable<EntityProperty> entityProperties)
{
	int count = 0;
	var rowsFormat = entityProperties.Aggregate(string.Empty, 
			(x, next) => 
				{
					var total = count % 2 == 0 ? x += "Auto," : x; 
					++count;
					return total;
				})
			.TrimEnd(',');
#>
			<core:BriefGrid Columns="*, *" Rows="<#= rowsFormat #>">
<#+ 
	count = 0;
	int rowCount = 0;
	foreach(var entityProperty in entityProperties)
    {
		GenerateControlForProperty(entityProperty, rowCount, count % 2);
		if (++count % 2 == 0)
        {
			++rowCount;
		}
	}
#>
			</core:BriefGrid>
<#+ 
}

private void GenerateControlForProperty(EntityProperty entityProperty, int rowCount, int colunmCount)
{
	var titleFeature = entityProperty.Features.OfType<DisplayNameLocalizedFeature>().SingleOrDefault();

	var isRequired = entityProperty.Features.OfType<RequiredPropertyFeature>().Any();

		var controlDescriptor = PropertyTypeToControlMap.GetControlDescriptor(entityProperty);

		var isReadOnlyText = entityProperty.Features.OfType<ReadOnlyPropertyFeature>().Any() && entityProperty.Type == typeof(string);
#>
				<controls:<#=controlDescriptor.ControlName#> Grid.Row="<#= rowCount #>" Grid.Column="<#= colunmCount #>" 
										PropertyName="{focusableBinding:FocusableBinding Localizer.<#= titleFeature != null ? titleFeature.ResourceKey : entityProperty.Name #>}" 
										<#=controlDescriptor.TargetPropertyName#>="{Binding <#= entityProperty.Name #>, UpdateSourceTrigger=PropertyChanged, Delay={StaticResource BindingDelay}, ValidatesOnDataErrors=True, NotifyOnValidationError=True, Mode=TwoWay}" 
										<#= isReadOnlyText ? controlDescriptor.ReadOnlyExpression : string.Empty #>
										/>
<#+

}

#>
